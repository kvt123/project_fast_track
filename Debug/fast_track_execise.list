
fast_track_execise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001224  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001354  08001354  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001354  08001354  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08001354  08001354  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001354  08001354  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001354  08001354  00011354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001358  08001358  00011358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800135c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000868  20000018  08001374  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000880  08001374  00020880  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003ed3  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013fc  00000000  00000000  00023f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005c0  00000000  00000000  00025310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004c8  00000000  00000000  000258d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ca8f  00000000  00000000  00025d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000074ad  00000000  00000000  00032827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003d867  00000000  00000000  00039cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007753b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001498  00000000  00000000  0007758c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000018 	.word	0x20000018
 800014c:	00000000 	.word	0x00000000
 8000150:	0800133c 	.word	0x0800133c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000001c 	.word	0x2000001c
 800016c:	0800133c 	.word	0x0800133c

08000170 <app_init>:



/* function init button,uart0, queue */
void app_init()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

    RCC_Configuration();
 8000174:	f000 ff80 	bl	8001078 <RCC_Configuration>

    /* NVIC configuration */
  NVIC_Configuration();
 8000178:	f000 fe9c 	bl	8000eb4 <NVIC_Configuration>
  GPIO_Configuration();
 800017c:	f000 fcca 	bl	8000b14 <GPIO_Configuration>

  USART_Configuration();
 8000180:	f000 ff8c 	bl	800109c <USART_Configuration>

  HAL_GPIO_Write_Pin(GPIOC, GPIO_Pin_13, Bit_SET);
 8000184:	2201      	movs	r2, #1
 8000186:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800018a:	4806      	ldr	r0, [pc, #24]	; (80001a4 <app_init+0x34>)
 800018c:	f000 f92f 	bl	80003ee <HAL_GPIO_Write_Pin>
    /*initial queue*/
    queue_init();
 8000190:	f000 fea6 	bl	8000ee0 <queue_init>
    FLASH_UnlockBank1();
 8000194:	f000 f852 	bl	800023c <FLASH_UnlockBank1>

    /* Clear All pending flags */
    FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
 8000198:	2034      	movs	r0, #52	; 0x34
 800019a:	f000 f861 	bl	8000260 <FLASH_ClearFlag>
}
 800019e:	bf00      	nop
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	40011000 	.word	0x40011000

080001a8 <StartProgram>:

/*function jump to Boot */
void StartProgram(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b086      	sub	sp, #24
 80001ac:	af00      	add	r7, sp, #0
    parse_status_t status;
    parse_data_line_struct_t Output;
    uint8_t *popBuff;
    bool stopProgram= false;
 80001ae:	2300      	movs	r3, #0
 80001b0:	75fb      	strb	r3, [r7, #23]
    while(!stopProgram)
 80001b2:	e01a      	b.n	80001ea <StartProgram+0x42>
    {
        if(!queue_isEmpty())
 80001b4:	f000 fea6 	bl	8000f04 <queue_isEmpty>
 80001b8:	4603      	mov	r3, r0
 80001ba:	f083 0301 	eor.w	r3, r3, #1
 80001be:	b2db      	uxtb	r3, r3
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d012      	beq.n	80001ea <StartProgram+0x42>
        {
            popBuff = queue_pop();
 80001c4:	f000 ff3c 	bl	8001040 <queue_pop>
 80001c8:	6138      	str	r0, [r7, #16]
            handleDataFrame(popBuff, &Output,Control_Led);
 80001ca:	1d3b      	adds	r3, r7, #4
 80001cc:	4a0c      	ldr	r2, [pc, #48]	; (8000200 <StartProgram+0x58>)
 80001ce:	4619      	mov	r1, r3
 80001d0:	6938      	ldr	r0, [r7, #16]
 80001d2:	f000 fd8d 	bl	8000cf0 <handleDataFrame>
            CreateSendFeedBackFrame(&Output, frameData, &frameSize);
 80001d6:	1d3b      	adds	r3, r7, #4
 80001d8:	4a0a      	ldr	r2, [pc, #40]	; (8000204 <StartProgram+0x5c>)
 80001da:	490b      	ldr	r1, [pc, #44]	; (8000208 <StartProgram+0x60>)
 80001dc:	4618      	mov	r0, r3
 80001de:	f000 fe2b 	bl	8000e38 <CreateSendFeedBackFrame>
            queue_get();
 80001e2:	f000 fedf 	bl	8000fa4 <queue_get>
           USART1_transmit();
 80001e6:	f000 ff85 	bl	80010f4 <USART1_transmit>
    while(!stopProgram)
 80001ea:	7dfb      	ldrb	r3, [r7, #23]
 80001ec:	f083 0301 	eor.w	r3, r3, #1
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d1de      	bne.n	80001b4 <StartProgram+0xc>
        }
    }
    
}
 80001f6:	bf00      	nop
 80001f8:	bf00      	nop
 80001fa:	3718      	adds	r7, #24
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	08000421 	.word	0x08000421
 8000204:	20000048 	.word	0x20000048
 8000208:	20000034 	.word	0x20000034

0800020c <USART1_callBackFuction>:



void USART1_callBackFuction(uint8_t ch)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
 8000212:	4603      	mov	r3, r0
 8000214:	71fb      	strb	r3, [r7, #7]
    if( 0x03 == ch)
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	2b03      	cmp	r3, #3
 800021a:	d106      	bne.n	800022a <USART1_callBackFuction+0x1e>
    {
        queue_push_data(ch);
 800021c:	79fb      	ldrb	r3, [r7, #7]
 800021e:	4618      	mov	r0, r3
 8000220:	f000 fee4 	bl	8000fec <queue_push_data>
        queue_put_newLine();
 8000224:	f000 fe96 	bl	8000f54 <queue_put_newLine>
    }
    else
    {
        queue_push_data(ch);
    }
}
 8000228:	e003      	b.n	8000232 <USART1_callBackFuction+0x26>
        queue_push_data(ch);
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	4618      	mov	r0, r3
 800022e:	f000 fedd 	bl	8000fec <queue_push_data>
}
 8000232:	bf00      	nop
 8000234:	3708      	adds	r7, #8
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
	...

0800023c <FLASH_UnlockBank1>:
  *           equivalent to FLASH_Unlock function.
  * @param  None
  * @retval None
  */
void FLASH_UnlockBank1(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <FLASH_UnlockBank1+0x18>)
 8000242:	4a05      	ldr	r2, [pc, #20]	; (8000258 <FLASH_UnlockBank1+0x1c>)
 8000244:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8000246:	4b03      	ldr	r3, [pc, #12]	; (8000254 <FLASH_UnlockBank1+0x18>)
 8000248:	4a04      	ldr	r2, [pc, #16]	; (800025c <FLASH_UnlockBank1+0x20>)
 800024a:	605a      	str	r2, [r3, #4]
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	40022000 	.word	0x40022000
 8000258:	45670123 	.word	0x45670123
 800025c:	cdef89ab 	.word	0xcdef89ab

08000260 <FLASH_ClearFlag>:
  *     @arg FLASH_FLAG_WRPRTERR: FLASH Write protected error flag      
  *     @arg FLASH_FLAG_EOP: FLASH End of Operation flag           
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
#else
  /* Check the parameters */
  // assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8000268:	4a03      	ldr	r2, [pc, #12]	; (8000278 <FLASH_ClearFlag+0x18>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	60d3      	str	r3, [r2, #12]
#endif /* STM32F10X_XL */
}
 800026e:	bf00      	nop
 8000270:	370c      	adds	r7, #12
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr
 8000278:	40022000 	.word	0x40022000

0800027c <HAL_GPIO_Init>:
#include "gpio_driver.h"



void HAL_GPIO_Init(GPIO_TypeDef * GPIOx, GPIO_InitTypeDef * GPIO_InitStruct)
{
 800027c:	b480      	push	{r7}
 800027e:	b089      	sub	sp, #36	; 0x24
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
 8000284:	6039      	str	r1, [r7, #0]
    uint32_t currentMode = 0x00, currentPin = 0x00, pinPos = 0x00, pos = 0x00;
 8000286:	2300      	movs	r3, #0
 8000288:	61fb      	str	r3, [r7, #28]
 800028a:	2300      	movs	r3, #0
 800028c:	613b      	str	r3, [r7, #16]
 800028e:	2300      	movs	r3, #0
 8000290:	61bb      	str	r3, [r7, #24]
 8000292:	2300      	movs	r3, #0
 8000294:	60fb      	str	r3, [r7, #12]
    uint32_t tmpReg = 0x00, pinMask = 0x00;
 8000296:	2300      	movs	r3, #0
 8000298:	617b      	str	r3, [r7, #20]
 800029a:	2300      	movs	r3, #0
 800029c:	60bb      	str	r3, [r7, #8]


/*---------------------------- GPIO Mode Configuration -----------------------*/  

    currentMode = ((GPIO_InitStruct->GPIO_Mode) & 0x0F);
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	78db      	ldrb	r3, [r3, #3]
 80002a2:	f003 030f 	and.w	r3, r3, #15
 80002a6:	61fb      	str	r3, [r7, #28]

    if(((GPIO_InitStruct->GPIO_Mode)& 0x10) != 0x00)
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	78db      	ldrb	r3, [r3, #3]
 80002ac:	f003 0310 	and.w	r3, r3, #16
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d005      	beq.n	80002c0 <HAL_GPIO_Init+0x44>
    {
        currentMode |=  GPIO_InitStruct->GPIO_Speed;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	789b      	ldrb	r3, [r3, #2]
 80002b8:	461a      	mov	r2, r3
 80002ba:	69fb      	ldr	r3, [r7, #28]
 80002bc:	4313      	orrs	r3, r2
 80002be:	61fb      	str	r3, [r7, #28]
    }

/*---------------------------- GPIO CRL Configuration ------------------------*/

    if((GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	881b      	ldrh	r3, [r3, #0]
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d041      	beq.n	800034e <HAL_GPIO_Init+0xd2>
    {

        tmpReg = GPIOx->CRL;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	617b      	str	r3, [r7, #20]
        for(pinPos=0; pinPos <0x08; pinPos++)
 80002d0:	2300      	movs	r3, #0
 80002d2:	61bb      	str	r3, [r7, #24]
 80002d4:	e035      	b.n	8000342 <HAL_GPIO_Init+0xc6>
        {
            currentPin = 0x01 << pinPos;
 80002d6:	2201      	movs	r2, #1
 80002d8:	69bb      	ldr	r3, [r7, #24]
 80002da:	fa02 f303 	lsl.w	r3, r2, r3
 80002de:	613b      	str	r3, [r7, #16]
            pos = (GPIO_InitStruct->GPIO_Pin)&((uint32_t)0x00FF);
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	881b      	ldrh	r3, [r3, #0]
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	60fb      	str	r3, [r7, #12]
            if(pos == currentPin)
 80002e8:	68fa      	ldr	r2, [r7, #12]
 80002ea:	693b      	ldr	r3, [r7, #16]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d125      	bne.n	800033c <HAL_GPIO_Init+0xc0>
            {
                /* clear 4 bit using */
                pinMask = ((0x0F)<< (pinPos*4));
 80002f0:	69bb      	ldr	r3, [r7, #24]
 80002f2:	009b      	lsls	r3, r3, #2
 80002f4:	220f      	movs	r2, #15
 80002f6:	fa02 f303 	lsl.w	r3, r2, r3
 80002fa:	60bb      	str	r3, [r7, #8]
                tmpReg &= ~pinMask;
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	43db      	mvns	r3, r3
 8000300:	697a      	ldr	r2, [r7, #20]
 8000302:	4013      	ands	r3, r2
 8000304:	617b      	str	r3, [r7, #20]
                /* write user init config struct value to CRL */
                tmpReg |= currentMode << (pinPos*4);
 8000306:	69bb      	ldr	r3, [r7, #24]
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	69fa      	ldr	r2, [r7, #28]
 800030c:	fa02 f303 	lsl.w	r3, r2, r3
 8000310:	697a      	ldr	r2, [r7, #20]
 8000312:	4313      	orrs	r3, r2
 8000314:	617b      	str	r3, [r7, #20]

                /* Reset the corresponding ODR bit */
                if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	78db      	ldrb	r3, [r3, #3]
 800031a:	2b28      	cmp	r3, #40	; 0x28
 800031c:	d105      	bne.n	800032a <HAL_GPIO_Init+0xae>
                {
                  GPIOx->BRR = (((uint32_t)0x01) << pinPos);
 800031e:	2201      	movs	r2, #1
 8000320:	69bb      	ldr	r3, [r7, #24]
 8000322:	409a      	lsls	r2, r3
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	615a      	str	r2, [r3, #20]
 8000328:	e008      	b.n	800033c <HAL_GPIO_Init+0xc0>
                }
                else
                {
                  /* Set the corresponding ODR bit */
                  if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	78db      	ldrb	r3, [r3, #3]
 800032e:	2b48      	cmp	r3, #72	; 0x48
 8000330:	d104      	bne.n	800033c <HAL_GPIO_Init+0xc0>
                  {
                    GPIOx->BSRR = (((uint32_t)0x01) << pinPos);
 8000332:	2201      	movs	r2, #1
 8000334:	69bb      	ldr	r3, [r7, #24]
 8000336:	409a      	lsls	r2, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	611a      	str	r2, [r3, #16]
        for(pinPos=0; pinPos <0x08; pinPos++)
 800033c:	69bb      	ldr	r3, [r7, #24]
 800033e:	3301      	adds	r3, #1
 8000340:	61bb      	str	r3, [r7, #24]
 8000342:	69bb      	ldr	r3, [r7, #24]
 8000344:	2b07      	cmp	r3, #7
 8000346:	d9c6      	bls.n	80002d6 <HAL_GPIO_Init+0x5a>
                

            }
        }

        GPIOx->CRL = tmpReg;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	697a      	ldr	r2, [r7, #20]
 800034c:	601a      	str	r2, [r3, #0]
    }


/*---------------------------- GPIO CRH Configuration ------------------------*/

    if(((GPIO_InitStruct->GPIO_Pin) & 0xFF00) != 0x00)
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	881b      	ldrh	r3, [r3, #0]
 8000352:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000356:	2b00      	cmp	r3, #0
 8000358:	d044      	beq.n	80003e4 <HAL_GPIO_Init+0x168>
    {

        tmpReg = GPIOx->CRH;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	685b      	ldr	r3, [r3, #4]
 800035e:	617b      	str	r3, [r7, #20]
        for(pinPos=0; pinPos <0x08; pinPos++)
 8000360:	2300      	movs	r3, #0
 8000362:	61bb      	str	r3, [r7, #24]
 8000364:	e038      	b.n	80003d8 <HAL_GPIO_Init+0x15c>
        {
            currentPin = 0x01 << pinPos;
 8000366:	2201      	movs	r2, #1
 8000368:	69bb      	ldr	r3, [r7, #24]
 800036a:	fa02 f303 	lsl.w	r3, r2, r3
 800036e:	613b      	str	r3, [r7, #16]

            pos = ((GPIO_InitStruct->GPIO_Pin)>>8)&((uint32_t)0x00FF);
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	881b      	ldrh	r3, [r3, #0]
 8000374:	0a1b      	lsrs	r3, r3, #8
 8000376:	b29b      	uxth	r3, r3
 8000378:	b2db      	uxtb	r3, r3
 800037a:	60fb      	str	r3, [r7, #12]
            if(pos == currentPin)
 800037c:	68fa      	ldr	r2, [r7, #12]
 800037e:	693b      	ldr	r3, [r7, #16]
 8000380:	429a      	cmp	r2, r3
 8000382:	d126      	bne.n	80003d2 <HAL_GPIO_Init+0x156>
            {
                /* clear 4 bit using */
                pinMask = ((0x0F)<< (pinPos*4));
 8000384:	69bb      	ldr	r3, [r7, #24]
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	220f      	movs	r2, #15
 800038a:	fa02 f303 	lsl.w	r3, r2, r3
 800038e:	60bb      	str	r3, [r7, #8]
                tmpReg &= ~pinMask;
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	43db      	mvns	r3, r3
 8000394:	697a      	ldr	r2, [r7, #20]
 8000396:	4013      	ands	r3, r2
 8000398:	617b      	str	r3, [r7, #20]
                /* write user init config struct value to CRL */
                tmpReg |= currentMode << (pinPos*4);
 800039a:	69bb      	ldr	r3, [r7, #24]
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	69fa      	ldr	r2, [r7, #28]
 80003a0:	fa02 f303 	lsl.w	r3, r2, r3
 80003a4:	697a      	ldr	r2, [r7, #20]
 80003a6:	4313      	orrs	r3, r2
 80003a8:	617b      	str	r3, [r7, #20]
                 /* Reset the corresponding ODR bit */
                if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	78db      	ldrb	r3, [r3, #3]
 80003ae:	2b28      	cmp	r3, #40	; 0x28
 80003b0:	d105      	bne.n	80003be <HAL_GPIO_Init+0x142>
                {
                  GPIOx->BRR = (((uint32_t)0x01) << (pinPos + (uint32_t)0x08));
 80003b2:	69bb      	ldr	r3, [r7, #24]
 80003b4:	3308      	adds	r3, #8
 80003b6:	2201      	movs	r2, #1
 80003b8:	409a      	lsls	r2, r3
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	615a      	str	r2, [r3, #20]
                }
                /* Set the corresponding ODR bit */
                if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	78db      	ldrb	r3, [r3, #3]
 80003c2:	2b48      	cmp	r3, #72	; 0x48
 80003c4:	d105      	bne.n	80003d2 <HAL_GPIO_Init+0x156>
                {
                  GPIOx->BSRR = (((uint32_t)0x01) << (pinPos + (uint32_t)0x08));
 80003c6:	69bb      	ldr	r3, [r7, #24]
 80003c8:	3308      	adds	r3, #8
 80003ca:	2201      	movs	r2, #1
 80003cc:	409a      	lsls	r2, r3
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	611a      	str	r2, [r3, #16]
        for(pinPos=0; pinPos <0x08; pinPos++)
 80003d2:	69bb      	ldr	r3, [r7, #24]
 80003d4:	3301      	adds	r3, #1
 80003d6:	61bb      	str	r3, [r7, #24]
 80003d8:	69bb      	ldr	r3, [r7, #24]
 80003da:	2b07      	cmp	r3, #7
 80003dc:	d9c3      	bls.n	8000366 <HAL_GPIO_Init+0xea>
                }
            }
        }

        GPIOx->CRH = tmpReg;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	697a      	ldr	r2, [r7, #20]
 80003e2:	605a      	str	r2, [r3, #4]
    }


}
 80003e4:	bf00      	nop
 80003e6:	3724      	adds	r7, #36	; 0x24
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr

080003ee <HAL_GPIO_Write_Pin>:

void HAL_GPIO_Write_Pin(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin,BitAction PinState)
{
 80003ee:	b480      	push	{r7}
 80003f0:	b085      	sub	sp, #20
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	60f8      	str	r0, [r7, #12]
 80003f6:	60b9      	str	r1, [r7, #8]
 80003f8:	4613      	mov	r3, r2
 80003fa:	71fb      	strb	r3, [r7, #7]
    if(PinState == Bit_SET)
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	2b01      	cmp	r3, #1
 8000400:	d106      	bne.n	8000410 <HAL_GPIO_Write_Pin+0x22>
    {
        /* set bit*/
        GPIOx->BSRR |= GPIO_Pin;
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	691a      	ldr	r2, [r3, #16]
 8000406:	68bb      	ldr	r3, [r7, #8]
 8000408:	431a      	orrs	r2, r3
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	611a      	str	r2, [r3, #16]
    else
    {
       GPIOx->BRR = GPIO_Pin;
    }

}
 800040e:	e002      	b.n	8000416 <HAL_GPIO_Write_Pin+0x28>
       GPIOx->BRR = GPIO_Pin;
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	68ba      	ldr	r2, [r7, #8]
 8000414:	615a      	str	r2, [r3, #20]
}
 8000416:	bf00      	nop
 8000418:	3714      	adds	r7, #20
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr

08000420 <Control_Led>:

}


void Control_Led(bool PinState)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	71fb      	strb	r3, [r7, #7]
    if(true == PinState)
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d006      	beq.n	800043e <Control_Led+0x1e>
    {
        HAL_GPIO_Write_Pin(GPIOC, GPIO_Pin_13,Bit_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000436:	4807      	ldr	r0, [pc, #28]	; (8000454 <Control_Led+0x34>)
 8000438:	f7ff ffd9 	bl	80003ee <HAL_GPIO_Write_Pin>
    }
    else
    {
        HAL_GPIO_Write_Pin(GPIOC, GPIO_Pin_13,Bit_SET);
    }
 800043c:	e005      	b.n	800044a <Control_Led+0x2a>
        HAL_GPIO_Write_Pin(GPIOC, GPIO_Pin_13,Bit_SET);
 800043e:	2201      	movs	r2, #1
 8000440:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000444:	4803      	ldr	r0, [pc, #12]	; (8000454 <Control_Led+0x34>)
 8000446:	f7ff ffd2 	bl	80003ee <HAL_GPIO_Write_Pin>
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40011000 	.word	0x40011000

08000458 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  // assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000460:	4a05      	ldr	r2, [pc, #20]	; (8000478 <NVIC_PriorityGroupConfig+0x20>)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800046c:	60d3      	str	r3, [r2, #12]
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	e000ed00 	.word	0xe000ed00

0800047c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800047c:	b480      	push	{r7}
 800047e:	b087      	sub	sp, #28
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000484:	2300      	movs	r3, #0
 8000486:	617b      	str	r3, [r7, #20]
 8000488:	2300      	movs	r3, #0
 800048a:	613b      	str	r3, [r7, #16]
 800048c:	230f      	movs	r3, #15
 800048e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  // assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  // assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  // assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	78db      	ldrb	r3, [r3, #3]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d03a      	beq.n	800050e <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000498:	4b27      	ldr	r3, [pc, #156]	; (8000538 <NVIC_Init+0xbc>)
 800049a:	68db      	ldr	r3, [r3, #12]
 800049c:	43db      	mvns	r3, r3
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	f003 0307 	and.w	r3, r3, #7
 80004a4:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	f1c3 0304 	rsb	r3, r3, #4
 80004ac:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	fa22 f303 	lsr.w	r3, r2, r3
 80004b6:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	785b      	ldrb	r3, [r3, #1]
 80004bc:	461a      	mov	r2, r3
 80004be:	693b      	ldr	r3, [r7, #16]
 80004c0:	fa02 f303 	lsl.w	r3, r2, r3
 80004c4:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	789b      	ldrb	r3, [r3, #2]
 80004ca:	461a      	mov	r2, r3
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	4013      	ands	r3, r2
 80004d0:	697a      	ldr	r2, [r7, #20]
 80004d2:	4313      	orrs	r3, r2
 80004d4:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	011b      	lsls	r3, r3, #4
 80004da:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80004dc:	4a17      	ldr	r2, [pc, #92]	; (800053c <NVIC_Init+0xc0>)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	6979      	ldr	r1, [r7, #20]
 80004e4:	b2c9      	uxtb	r1, r1
 80004e6:	4413      	add	r3, r2
 80004e8:	460a      	mov	r2, r1
 80004ea:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80004f6:	4911      	ldr	r1, [pc, #68]	; (800053c <NVIC_Init+0xc0>)
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	7812      	ldrb	r2, [r2, #0]
 80004fc:	0952      	lsrs	r2, r2, #5
 80004fe:	b2d2      	uxtb	r2, r2
 8000500:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000502:	2201      	movs	r2, #1
 8000504:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000508:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800050c:	e00f      	b.n	800052e <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000516:	4909      	ldr	r1, [pc, #36]	; (800053c <NVIC_Init+0xc0>)
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	7812      	ldrb	r2, [r2, #0]
 800051c:	0952      	lsrs	r2, r2, #5
 800051e:	b2d2      	uxtb	r2, r2
 8000520:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000522:	2201      	movs	r2, #1
 8000524:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000526:	f100 0320 	add.w	r3, r0, #32
 800052a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800052e:	bf00      	nop
 8000530:	371c      	adds	r7, #28
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	e000ed00 	.word	0xe000ed00
 800053c:	e000e100 	.word	0xe000e100

08000540 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000540:	b480      	push	{r7}
 8000542:	b087      	sub	sp, #28
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	2300      	movs	r3, #0
 800054e:	613b      	str	r3, [r7, #16]
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000558:	4b4f      	ldr	r3, [pc, #316]	; (8000698 <RCC_GetClocksFreq+0x158>)
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	f003 030c 	and.w	r3, r3, #12
 8000560:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	2b08      	cmp	r3, #8
 8000566:	d011      	beq.n	800058c <RCC_GetClocksFreq+0x4c>
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	2b08      	cmp	r3, #8
 800056c:	d83a      	bhi.n	80005e4 <RCC_GetClocksFreq+0xa4>
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d003      	beq.n	800057c <RCC_GetClocksFreq+0x3c>
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	2b04      	cmp	r3, #4
 8000578:	d004      	beq.n	8000584 <RCC_GetClocksFreq+0x44>
 800057a:	e033      	b.n	80005e4 <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4a47      	ldr	r2, [pc, #284]	; (800069c <RCC_GetClocksFreq+0x15c>)
 8000580:	601a      	str	r2, [r3, #0]
      break;
 8000582:	e033      	b.n	80005ec <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4a45      	ldr	r2, [pc, #276]	; (800069c <RCC_GetClocksFreq+0x15c>)
 8000588:	601a      	str	r2, [r3, #0]
      break;
 800058a:	e02f      	b.n	80005ec <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800058c:	4b42      	ldr	r3, [pc, #264]	; (8000698 <RCC_GetClocksFreq+0x158>)
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000594:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000596:	4b40      	ldr	r3, [pc, #256]	; (8000698 <RCC_GetClocksFreq+0x158>)
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800059e:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80005a0:	693b      	ldr	r3, [r7, #16]
 80005a2:	0c9b      	lsrs	r3, r3, #18
 80005a4:	3302      	adds	r3, #2
 80005a6:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d106      	bne.n	80005bc <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80005ae:	693b      	ldr	r3, [r7, #16]
 80005b0:	4a3b      	ldr	r2, [pc, #236]	; (80006a0 <RCC_GetClocksFreq+0x160>)
 80005b2:	fb03 f202 	mul.w	r2, r3, r2
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80005ba:	e017      	b.n	80005ec <RCC_GetClocksFreq+0xac>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80005bc:	4b36      	ldr	r3, [pc, #216]	; (8000698 <RCC_GetClocksFreq+0x158>)
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d006      	beq.n	80005d6 <RCC_GetClocksFreq+0x96>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80005c8:	693b      	ldr	r3, [r7, #16]
 80005ca:	4a35      	ldr	r2, [pc, #212]	; (80006a0 <RCC_GetClocksFreq+0x160>)
 80005cc:	fb03 f202 	mul.w	r2, r3, r2
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	601a      	str	r2, [r3, #0]
      break;
 80005d4:	e00a      	b.n	80005ec <RCC_GetClocksFreq+0xac>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80005d6:	693b      	ldr	r3, [r7, #16]
 80005d8:	4a30      	ldr	r2, [pc, #192]	; (800069c <RCC_GetClocksFreq+0x15c>)
 80005da:	fb03 f202 	mul.w	r2, r3, r2
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	601a      	str	r2, [r3, #0]
      break;
 80005e2:	e003      	b.n	80005ec <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a2d      	ldr	r2, [pc, #180]	; (800069c <RCC_GetClocksFreq+0x15c>)
 80005e8:	601a      	str	r2, [r3, #0]
      break;
 80005ea:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80005ec:	4b2a      	ldr	r3, [pc, #168]	; (8000698 <RCC_GetClocksFreq+0x158>)
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80005f4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80005fc:	4a29      	ldr	r2, [pc, #164]	; (80006a4 <RCC_GetClocksFreq+0x164>)
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	4413      	add	r3, r2
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	40da      	lsrs	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000614:	4b20      	ldr	r3, [pc, #128]	; (8000698 <RCC_GetClocksFreq+0x158>)
 8000616:	685b      	ldr	r3, [r3, #4]
 8000618:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800061c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	0a1b      	lsrs	r3, r3, #8
 8000622:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000624:	4a1f      	ldr	r2, [pc, #124]	; (80006a4 <RCC_GetClocksFreq+0x164>)
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	4413      	add	r3, r2
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	685a      	ldr	r2, [r3, #4]
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	40da      	lsrs	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <RCC_GetClocksFreq+0x158>)
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000644:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	0adb      	lsrs	r3, r3, #11
 800064a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800064c:	4a15      	ldr	r2, [pc, #84]	; (80006a4 <RCC_GetClocksFreq+0x164>)
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	4413      	add	r3, r2
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	685a      	ldr	r2, [r3, #4]
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	40da      	lsrs	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <RCC_GetClocksFreq+0x158>)
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	0b9b      	lsrs	r3, r3, #14
 8000672:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000674:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <RCC_GetClocksFreq+0x168>)
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	4413      	add	r3, r2
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	68da      	ldr	r2, [r3, #12]
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	fbb2 f2f3 	udiv	r2, r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	611a      	str	r2, [r3, #16]
}
 800068e:	bf00      	nop
 8000690:	371c      	adds	r7, #28
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	40021000 	.word	0x40021000
 800069c:	007a1200 	.word	0x007a1200
 80006a0:	003d0900 	.word	0x003d0900
 80006a4:	20000000 	.word	0x20000000
 80006a8:	20000010 	.word	0x20000010

080006ac <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	460b      	mov	r3, r1
 80006b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  if (NewState != DISABLE)
 80006b8:	78fb      	ldrb	r3, [r7, #3]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d006      	beq.n	80006cc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <RCC_APB2PeriphClockCmd+0x38>)
 80006c0:	699a      	ldr	r2, [r3, #24]
 80006c2:	4908      	ldr	r1, [pc, #32]	; (80006e4 <RCC_APB2PeriphClockCmd+0x38>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80006ca:	e006      	b.n	80006da <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <RCC_APB2PeriphClockCmd+0x38>)
 80006ce:	699a      	ldr	r2, [r3, #24]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	43db      	mvns	r3, r3
 80006d4:	4903      	ldr	r1, [pc, #12]	; (80006e4 <RCC_APB2PeriphClockCmd+0x38>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	618b      	str	r3, [r1, #24]
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	40021000 	.word	0x40021000

080006e8 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	; 0x30
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80006f2:	2300      	movs	r3, #0
 80006f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006f6:	2300      	movs	r3, #0
 80006f8:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 80006fa:	2300      	movs	r3, #0
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 80006fe:	2300      	movs	r3, #0
 8000700:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    // assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	8a1b      	ldrh	r3, [r3, #16]
 800070e:	b29b      	uxth	r3, r3
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8000712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000714:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8000718:	4013      	ands	r3, r2
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	88db      	ldrh	r3, [r3, #6]
 8000720:	461a      	mov	r2, r3
 8000722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000724:	4313      	orrs	r3, r2
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800072a:	b29a      	uxth	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	899b      	ldrh	r3, [r3, #12]
 8000734:	b29b      	uxth	r3, r3
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800073a:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 800073e:	4013      	ands	r3, r2
 8000740:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	889a      	ldrh	r2, [r3, #4]
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	891b      	ldrh	r3, [r3, #8]
 800074a:	4313      	orrs	r3, r2
 800074c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000752:	4313      	orrs	r3, r2
 8000754:	b29b      	uxth	r3, r3
 8000756:	461a      	mov	r2, r3
 8000758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800075a:	4313      	orrs	r3, r2
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800075e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000760:	b29a      	uxth	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	8a9b      	ldrh	r3, [r3, #20]
 800076a:	b29b      	uxth	r3, r3
 800076c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 800076e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000770:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000774:	4013      	ands	r3, r2
 8000776:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	899b      	ldrh	r3, [r3, #12]
 800077c:	461a      	mov	r2, r3
 800077e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000780:	4313      	orrs	r3, r2
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000786:	b29a      	uxth	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800078c:	f107 0308 	add.w	r3, r7, #8
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fed5 	bl	8000540 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	4a2e      	ldr	r2, [pc, #184]	; (8000854 <USART_Init+0x16c>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d102      	bne.n	80007a4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80007a2:	e001      	b.n	80007a8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80007a4:	693b      	ldr	r3, [r7, #16]
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	899b      	ldrh	r3, [r3, #12]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	b21b      	sxth	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	da0c      	bge.n	80007ce <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80007b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007b6:	4613      	mov	r3, r2
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	4413      	add	r3, r2
 80007bc:	009a      	lsls	r2, r3, #2
 80007be:	441a      	add	r2, r3
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
 80007cc:	e00b      	b.n	80007e6 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80007ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007d0:	4613      	mov	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	4413      	add	r3, r2
 80007d6:	009a      	lsls	r2, r3, #2
 80007d8:	441a      	add	r2, r3
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 80007e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e8:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <USART_Init+0x170>)
 80007ea:	fba2 2303 	umull	r2, r3, r2, r3
 80007ee:	095b      	lsrs	r3, r3, #5
 80007f0:	011b      	lsls	r3, r3, #4
 80007f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80007f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007f6:	091b      	lsrs	r3, r3, #4
 80007f8:	2264      	movs	r2, #100	; 0x64
 80007fa:	fb02 f303 	mul.w	r3, r2, r3
 80007fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	899b      	ldrh	r3, [r3, #12]
 8000808:	b29b      	uxth	r3, r3
 800080a:	b21b      	sxth	r3, r3
 800080c:	2b00      	cmp	r3, #0
 800080e:	da0c      	bge.n	800082a <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000810:	6a3b      	ldr	r3, [r7, #32]
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	3332      	adds	r3, #50	; 0x32
 8000816:	4a10      	ldr	r2, [pc, #64]	; (8000858 <USART_Init+0x170>)
 8000818:	fba2 2303 	umull	r2, r3, r2, r3
 800081c:	095b      	lsrs	r3, r3, #5
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000824:	4313      	orrs	r3, r2
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000828:	e00b      	b.n	8000842 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800082a:	6a3b      	ldr	r3, [r7, #32]
 800082c:	011b      	lsls	r3, r3, #4
 800082e:	3332      	adds	r3, #50	; 0x32
 8000830:	4a09      	ldr	r2, [pc, #36]	; (8000858 <USART_Init+0x170>)
 8000832:	fba2 2303 	umull	r2, r3, r2, r3
 8000836:	095b      	lsrs	r3, r3, #5
 8000838:	f003 030f 	and.w	r3, r3, #15
 800083c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800083e:	4313      	orrs	r3, r2
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000844:	b29a      	uxth	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	811a      	strh	r2, [r3, #8]
}
 800084a:	bf00      	nop
 800084c:	3730      	adds	r7, #48	; 0x30
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40013800 	.word	0x40013800
 8000858:	51eb851f 	.word	0x51eb851f

0800085c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	460b      	mov	r3, r1
 8000866:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  // assert_param(IS_USART_ALL_PERIPH(USARTx));
  // assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000868:	78fb      	ldrb	r3, [r7, #3]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d008      	beq.n	8000880 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	899b      	ldrh	r3, [r3, #12]
 8000872:	b29b      	uxth	r3, r3
 8000874:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000878:	b29a      	uxth	r2, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 800087e:	e007      	b.n	8000890 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	899b      	ldrh	r3, [r3, #12]
 8000884:	b29b      	uxth	r3, r3
 8000886:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800088a:	b29a      	uxth	r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	819a      	strh	r2, [r3, #12]
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr

0800089a <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800089a:	b480      	push	{r7}
 800089c:	b087      	sub	sp, #28
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
 80008a2:	460b      	mov	r3, r1
 80008a4:	807b      	strh	r3, [r7, #2]
 80008a6:	4613      	mov	r3, r2
 80008a8:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    // assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80008be:	887b      	ldrh	r3, [r7, #2]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	095b      	lsrs	r3, r3, #5
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 80008c8:	887b      	ldrh	r3, [r7, #2]
 80008ca:	f003 031f 	and.w	r3, r3, #31
 80008ce:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80008d0:	2201      	movs	r2, #1
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d103      	bne.n	80008e8 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	330c      	adds	r3, #12
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	e009      	b.n	80008fc <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80008e8:	693b      	ldr	r3, [r7, #16]
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d103      	bne.n	80008f6 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	3310      	adds	r3, #16
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	e002      	b.n	80008fc <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	3314      	adds	r3, #20
 80008fa:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80008fc:	787b      	ldrb	r3, [r7, #1]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d006      	beq.n	8000910 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	6819      	ldr	r1, [r3, #0]
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	68ba      	ldr	r2, [r7, #8]
 800090a:	430a      	orrs	r2, r1
 800090c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800090e:	e006      	b.n	800091e <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	6819      	ldr	r1, [r3, #0]
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	43da      	mvns	r2, r3
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	400a      	ands	r2, r1
 800091c:	601a      	str	r2, [r3, #0]
}
 800091e:	bf00      	nop
 8000920:	371c      	adds	r7, #28
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	460b      	mov	r3, r1
 8000932:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  // assert_param(IS_USART_ALL_PERIPH(USARTx));
  // assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000934:	887b      	ldrh	r3, [r7, #2]
 8000936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800093a:	b29a      	uxth	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	809a      	strh	r2, [r3, #4]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr

0800094a <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  // assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	889b      	ldrh	r3, [r3, #4]
 8000956:	b29b      	uxth	r3, r3
 8000958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800095c:	b29b      	uxth	r3, r3
}
 800095e:	4618      	mov	r0, r3
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr

08000968 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000968:	b480      	push	{r7}
 800096a:	b087      	sub	sp, #28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	460b      	mov	r3, r1
 8000972:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000980:	2300      	movs	r3, #0
 8000982:	74fb      	strb	r3, [r7, #19]
  {
    // assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000984:	887b      	ldrh	r3, [r7, #2]
 8000986:	b2db      	uxtb	r3, r3
 8000988:	095b      	lsrs	r3, r3, #5
 800098a:	b2db      	uxtb	r3, r3
 800098c:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 800098e:	887b      	ldrh	r3, [r7, #2]
 8000990:	f003 031f 	and.w	r3, r3, #31
 8000994:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000996:	2201      	movs	r2, #1
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d107      	bne.n	80009b6 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	899b      	ldrh	r3, [r3, #12]
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	461a      	mov	r2, r3
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	4013      	ands	r3, r2
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	e011      	b.n	80009da <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d107      	bne.n	80009cc <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	8a1b      	ldrh	r3, [r3, #16]
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	461a      	mov	r2, r3
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	4013      	ands	r3, r2
 80009c8:	617b      	str	r3, [r7, #20]
 80009ca:	e006      	b.n	80009da <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	8a9b      	ldrh	r3, [r3, #20]
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	461a      	mov	r2, r3
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	4013      	ands	r3, r2
 80009d8:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 80009da:	887b      	ldrh	r3, [r7, #2]
 80009dc:	0a1b      	lsrs	r3, r3, #8
 80009de:	b29b      	uxth	r3, r3
 80009e0:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80009e2:	2201      	movs	r2, #1
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	461a      	mov	r2, r3
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	4013      	ands	r3, r2
 80009f8:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d005      	beq.n	8000a0c <USART_GetITStatus+0xa4>
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d002      	beq.n	8000a0c <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000a06:	2301      	movs	r3, #1
 8000a08:	74fb      	strb	r3, [r7, #19]
 8000a0a:	e001      	b.n	8000a10 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000a10:	7cfb      	ldrb	r3, [r7, #19]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	371c      	adds	r7, #28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <HardFault_Handler+0x4>

08000a2e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <MemManage_Handler+0x4>

08000a34 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <BusFault_Handler+0x4>

08000a3a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <UsageFault_Handler+0x4>

08000a40 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr

08000a4c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <PendSV_Handler>:
  * @brief  This function handles PendSV_Handler exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr

08000a70 <USART1_IRQHandler>:
  * @brief  This function handles USARTy global interrupt request.
  * @param  None
  * @retval None
  */
void USART1_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
   if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 8000a76:	f240 5125 	movw	r1, #1317	; 0x525
 8000a7a:	481f      	ldr	r0, [pc, #124]	; (8000af8 <USART1_IRQHandler+0x88>)
 8000a7c:	f7ff ff74 	bl	8000968 <USART_GetITStatus>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d008      	beq.n	8000a98 <USART1_IRQHandler+0x28>
  {
      uint8_t ch;
      ch =  USART_ReceiveData(USART1);
 8000a86:	481c      	ldr	r0, [pc, #112]	; (8000af8 <USART1_IRQHandler+0x88>)
 8000a88:	f7ff ff5f 	bl	800094a <USART_ReceiveData>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	71fb      	strb	r3, [r7, #7]
      USART1_callBackFuction(ch);
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fbba 	bl	800020c <USART1_callBackFuction>
  }
  if(USART_GetITStatus(USART1, USART_IT_TXE) != RESET)
 8000a98:	f240 7127 	movw	r1, #1831	; 0x727
 8000a9c:	4816      	ldr	r0, [pc, #88]	; (8000af8 <USART1_IRQHandler+0x88>)
 8000a9e:	f7ff ff63 	bl	8000968 <USART_GetITStatus>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d022      	beq.n	8000aee <USART1_IRQHandler+0x7e>
  {
      USART_SendData(USART1, frameData[count++]);
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <USART1_IRQHandler+0x8c>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	1c5a      	adds	r2, r3, #1
 8000aae:	b2d1      	uxtb	r1, r2
 8000ab0:	4a12      	ldr	r2, [pc, #72]	; (8000afc <USART1_IRQHandler+0x8c>)
 8000ab2:	7011      	strb	r1, [r2, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <USART1_IRQHandler+0x90>)
 8000ab8:	5c9b      	ldrb	r3, [r3, r2]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	4619      	mov	r1, r3
 8000abe:	480e      	ldr	r0, [pc, #56]	; (8000af8 <USART1_IRQHandler+0x88>)
 8000ac0:	f7ff ff32 	bl	8000928 <USART_SendData>
      if(count == frameSize)
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <USART1_IRQHandler+0x8c>)
 8000ac6:	781a      	ldrb	r2, [r3, #0]
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <USART1_IRQHandler+0x94>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d10e      	bne.n	8000aee <USART1_IRQHandler+0x7e>
      {
            USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f240 7127 	movw	r1, #1831	; 0x727
 8000ad6:	4808      	ldr	r0, [pc, #32]	; (8000af8 <USART1_IRQHandler+0x88>)
 8000ad8:	f7ff fedf 	bl	800089a <USART_ITConfig>
            USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8000adc:	2201      	movs	r2, #1
 8000ade:	f240 5125 	movw	r1, #1317	; 0x525
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <USART1_IRQHandler+0x88>)
 8000ae4:	f7ff fed9 	bl	800089a <USART_ITConfig>
            count =0;
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <USART1_IRQHandler+0x8c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
      }

  }

}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40013800 	.word	0x40013800
 8000afc:	20000049 	.word	0x20000049
 8000b00:	20000034 	.word	0x20000034
 8000b04:	20000048 	.word	0x20000048

08000b08 <USART2_IRQHandler>:
  * @brief  This function handles USARTz global interrupt request.
  * @param  None
  * @retval None
  */
void USART2_IRQHandler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr

08000b14 <GPIO_Configuration>:

#define USART1_RxPin             GPIO_Pin_10
#define USART1_TxPin             GPIO_Pin_9

void GPIO_Configuration(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0

    GPIO_InitTypeDef InitStruct;

    /* init pin C13 for led blue*/
    InitStruct.GPIO_Pin  = GPIO_Pin_13;
 8000b1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b1e:	80bb      	strh	r3, [r7, #4]
    InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8000b20:	2301      	movs	r3, #1
 8000b22:	71bb      	strb	r3, [r7, #6]
    InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 8000b24:	2310      	movs	r3, #16
 8000b26:	71fb      	strb	r3, [r7, #7]

     HAL_GPIO_Init(GPIOC, &InitStruct);
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4812      	ldr	r0, [pc, #72]	; (8000b78 <GPIO_Configuration+0x64>)
 8000b2e:	f7ff fba5 	bl	800027c <HAL_GPIO_Init>

      /* init button pin A2 for bootloader program*/
    InitStruct.GPIO_Pin  = GPIO_Pin_2;
 8000b32:	2304      	movs	r3, #4
 8000b34:	80bb      	strh	r3, [r7, #4]
    InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8000b36:	2301      	movs	r3, #1
 8000b38:	71bb      	strb	r3, [r7, #6]
    InitStruct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	71fb      	strb	r3, [r7, #7]

     HAL_GPIO_Init(GPIOA, &InitStruct);
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	4619      	mov	r1, r3
 8000b42:	480e      	ldr	r0, [pc, #56]	; (8000b7c <GPIO_Configuration+0x68>)
 8000b44:	f7ff fb9a 	bl	800027c <HAL_GPIO_Init>


     /* configuration USART1 RX as input*/
    InitStruct.GPIO_Pin  = USART1_RxPin;
 8000b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b4c:	80bb      	strh	r3, [r7, #4]
    InitStruct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000b4e:	2304      	movs	r3, #4
 8000b50:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_Init(GPIOA, &InitStruct);
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	4619      	mov	r1, r3
 8000b56:	4809      	ldr	r0, [pc, #36]	; (8000b7c <GPIO_Configuration+0x68>)
 8000b58:	f7ff fb90 	bl	800027c <HAL_GPIO_Init>

    /* configuration USART1 TX as input*/
    InitStruct.GPIO_Pin  = USART1_TxPin;
 8000b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b60:	80bb      	strh	r3, [r7, #4]
    InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;   ///// transmit may be wrong
 8000b62:	2318      	movs	r3, #24
 8000b64:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_Init(GPIOA, &InitStruct);
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4804      	ldr	r0, [pc, #16]	; (8000b7c <GPIO_Configuration+0x68>)
 8000b6c:	f7ff fb86 	bl	800027c <HAL_GPIO_Init>

}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40011000 	.word	0x40011000
 8000b7c:	40010800 	.word	0x40010800

08000b80 <parseDataFrame>:



/* fuction parse each srec line */
parse_status_t parseDataFrame(uint8_t pInput[],parse_data_line_struct_t *Output)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b087      	sub	sp, #28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
    ID_Byte Id_Byte =  pInput[1];
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	785b      	ldrb	r3, [r3, #1]
 8000b8e:	74fb      	strb	r3, [r7, #19]
    uint32_t DataLength = pInput[2];
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3302      	adds	r3, #2
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	60fb      	str	r3, [r7, #12]
    uint32_t dataIndex=0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
    Output->Id_Byte = 0;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
    Output->dataLength = 0;
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	729a      	strb	r2, [r3, #10]
    status = e_parseStatus_inprogress;
 8000ba8:	4b50      	ldr	r3, [pc, #320]	; (8000cec <parseDataFrame+0x16c>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	701a      	strb	r2, [r3, #0]
    /* check invalid srec record */
    if(pInput[0]!= 0x02)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d001      	beq.n	8000bba <parseDataFrame+0x3a>
    {
        return e_parseStatus_error;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	e093      	b.n	8000ce2 <parseDataFrame+0x162>
    }

    switch (Id_Byte)
 8000bba:	7cfb      	ldrb	r3, [r7, #19]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	2b03      	cmp	r3, #3
 8000bc0:	d85e      	bhi.n	8000c80 <parseDataFrame+0x100>
 8000bc2:	a201      	add	r2, pc, #4	; (adr r2, 8000bc8 <parseDataFrame+0x48>)
 8000bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc8:	08000bd9 	.word	0x08000bd9
 8000bcc:	08000c03 	.word	0x08000c03
 8000bd0:	08000c2d 	.word	0x08000c2d
 8000bd4:	08000c57 	.word	0x08000c57
    {
        case ID_RECEIVED_SELECT_ON_OFF_MODE:
            if(DataLength == 0x01)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d106      	bne.n	8000bec <parseDataFrame+0x6c>
            {
                Output->Id_Byte = ID_RECEIVED_SELECT_ON_OFF_MODE;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	2201      	movs	r2, #1
 8000be2:	601a      	str	r2, [r3, #0]
                Output->dataLength = 1;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	2201      	movs	r2, #1
 8000be8:	729a      	strb	r2, [r3, #10]
            {
                Output->Id_Byte = ID_RECEIVED_SELECT_ON_OFF_MODE;
                Output->dataLength = DataLength;
                status = e_parseStatus_error;
            }
            break;
 8000bea:	e04d      	b.n	8000c88 <parseDataFrame+0x108>
                Output->Id_Byte = ID_RECEIVED_SELECT_ON_OFF_MODE;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	601a      	str	r2, [r3, #0]
                Output->dataLength = DataLength;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	729a      	strb	r2, [r3, #10]
                status = e_parseStatus_error;
 8000bfa:	4b3c      	ldr	r3, [pc, #240]	; (8000cec <parseDataFrame+0x16c>)
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	701a      	strb	r2, [r3, #0]
            break;
 8000c00:	e042      	b.n	8000c88 <parseDataFrame+0x108>
        case ID_RECEIVED_SELECT_AUTO_MANUAL_MODE:
            if(DataLength == 0x01)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d106      	bne.n	8000c16 <parseDataFrame+0x96>
            {
                Output->Id_Byte = ID_RECEIVED_SELECT_AUTO_MANUAL_MODE;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	601a      	str	r2, [r3, #0]
                Output->dataLength = 1;
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	2201      	movs	r2, #1
 8000c12:	729a      	strb	r2, [r3, #10]
            {
                Output->Id_Byte = ID_RECEIVED_SELECT_AUTO_MANUAL_MODE;
                Output->dataLength = DataLength;
                status = e_parseStatus_error;
            }
            break;
 8000c14:	e038      	b.n	8000c88 <parseDataFrame+0x108>
                Output->Id_Byte = ID_RECEIVED_SELECT_AUTO_MANUAL_MODE;
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	2202      	movs	r2, #2
 8000c1a:	601a      	str	r2, [r3, #0]
                Output->dataLength = DataLength;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	729a      	strb	r2, [r3, #10]
                status = e_parseStatus_error;
 8000c24:	4b31      	ldr	r3, [pc, #196]	; (8000cec <parseDataFrame+0x16c>)
 8000c26:	2202      	movs	r2, #2
 8000c28:	701a      	strb	r2, [r3, #0]
            break;
 8000c2a:	e02d      	b.n	8000c88 <parseDataFrame+0x108>
        case ID_RECEIVED_SELECT_WIND_LEVEL_MODE:
            if(DataLength == 0x01)
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d106      	bne.n	8000c40 <parseDataFrame+0xc0>
            {
                Output->Id_Byte = ID_RECEIVED_SELECT_WIND_LEVEL_MODE;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	2203      	movs	r2, #3
 8000c36:	601a      	str	r2, [r3, #0]
                Output->dataLength = 1;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	729a      	strb	r2, [r3, #10]
            {
                Output->Id_Byte = ID_RECEIVED_SELECT_WIND_LEVEL_MODE;
                Output->dataLength = DataLength;
                status = e_parseStatus_error;
            }
            break;
 8000c3e:	e023      	b.n	8000c88 <parseDataFrame+0x108>
                Output->Id_Byte = ID_RECEIVED_SELECT_WIND_LEVEL_MODE;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	2203      	movs	r2, #3
 8000c44:	601a      	str	r2, [r3, #0]
                Output->dataLength = DataLength;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	729a      	strb	r2, [r3, #10]
                status = e_parseStatus_error;
 8000c4e:	4b27      	ldr	r3, [pc, #156]	; (8000cec <parseDataFrame+0x16c>)
 8000c50:	2202      	movs	r2, #2
 8000c52:	701a      	strb	r2, [r3, #0]
            break;
 8000c54:	e018      	b.n	8000c88 <parseDataFrame+0x108>
        case ID_RECEIVED_SELECT_READ_ALL_STATUS_MODE:
            if(DataLength == 0x00)
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d106      	bne.n	8000c6a <parseDataFrame+0xea>
            {
                Output->Id_Byte = ID_RECEIVED_SELECT_READ_ALL_STATUS_MODE;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	2204      	movs	r2, #4
 8000c60:	601a      	str	r2, [r3, #0]
                Output->dataLength = 0;
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	2200      	movs	r2, #0
 8000c66:	729a      	strb	r2, [r3, #10]
            {
                Output->Id_Byte = ID_RECEIVED_SELECT_READ_ALL_STATUS_MODE;
                Output->dataLength = DataLength;
                status = e_parseStatus_error;
            }
            break;
 8000c68:	e00e      	b.n	8000c88 <parseDataFrame+0x108>
                Output->Id_Byte = ID_RECEIVED_SELECT_READ_ALL_STATUS_MODE;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	2204      	movs	r2, #4
 8000c6e:	601a      	str	r2, [r3, #0]
                Output->dataLength = DataLength;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	729a      	strb	r2, [r3, #10]
                status = e_parseStatus_error;
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <parseDataFrame+0x16c>)
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	701a      	strb	r2, [r3, #0]
            break;
 8000c7e:	e003      	b.n	8000c88 <parseDataFrame+0x108>
        default:
            status = e_parseStatus_error;
 8000c80:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <parseDataFrame+0x16c>)
 8000c82:	2202      	movs	r2, #2
 8000c84:	701a      	strb	r2, [r3, #0]
            break;
 8000c86:	bf00      	nop
    }

    if(e_parseStatus_error != status)
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <parseDataFrame+0x16c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d026      	beq.n	8000cde <parseDataFrame+0x15e>
    {
        /* handle to get data and check end of frame*/
        for (dataIndex = 0; dataIndex < Output->dataLength ; dataIndex++)
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	e00d      	b.n	8000cb2 <parseDataFrame+0x132>
        {
            Output->data[dataIndex] = pInput[dataIndex+3];
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	3303      	adds	r3, #3
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	7819      	ldrb	r1, [r3, #0]
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	3304      	adds	r3, #4
 8000ca8:	460a      	mov	r2, r1
 8000caa:	701a      	strb	r2, [r3, #0]
        for (dataIndex = 0; dataIndex < Output->dataLength ; dataIndex++)
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	7a9b      	ldrb	r3, [r3, #10]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d3eb      	bcc.n	8000c96 <parseDataFrame+0x116>
        }
        /* check end of frame  = 0x03*/
        if(0x03 == pInput[3+Output->dataLength])
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	7a9b      	ldrb	r3, [r3, #10]
 8000cc2:	3303      	adds	r3, #3
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d103      	bne.n	8000cd8 <parseDataFrame+0x158>
        {
            status = e_parseStatus_inprogress;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <parseDataFrame+0x16c>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	701a      	strb	r2, [r3, #0]
 8000cd6:	e002      	b.n	8000cde <parseDataFrame+0x15e>
        }
        else
        {
            status = e_parseStatus_error;
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <parseDataFrame+0x16c>)
 8000cda:	2202      	movs	r2, #2
 8000cdc:	701a      	strb	r2, [r3, #0]
        }

    }

    return status;
 8000cde:	4b03      	ldr	r3, [pc, #12]	; (8000cec <parseDataFrame+0x16c>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	371c      	adds	r7, #28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	20000014 	.word	0x20000014

08000cf0 <handleDataFrame>:


parse_status_t handleDataFrame(uint8_t pInput[],parse_data_line_struct_t *OutPutDataFeedBack,fp_gpio_callBackFuction GPIO_callBackFuction)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
    parse_data_line_struct_t Output;
    parse_status_t parseStatus = parseDataFrame(pInput,&Output);
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	4619      	mov	r1, r3
 8000d02:	68f8      	ldr	r0, [r7, #12]
 8000d04:	f7ff ff3c 	bl	8000b80 <parseDataFrame>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	77fb      	strb	r3, [r7, #31]
    switch (Output.Id_Byte)
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	2b03      	cmp	r3, #3
 8000d12:	f200 8084 	bhi.w	8000e1e <handleDataFrame+0x12e>
 8000d16:	a201      	add	r2, pc, #4	; (adr r2, 8000d1c <handleDataFrame+0x2c>)
 8000d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1c:	08000d2d 	.word	0x08000d2d
 8000d20:	08000d7f 	.word	0x08000d7f
 8000d24:	08000db5 	.word	0x08000db5
 8000d28:	08000df1 	.word	0x08000df1
    {
        case ID_RECEIVED_SELECT_ON_OFF_MODE:
        /* setup frame feed back*/
            OutPutDataFeedBack->Id_Byte = ID_FEEDBACK_SELECT_ON_OFF_MODE;
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	2281      	movs	r2, #129	; 0x81
 8000d30:	601a      	str	r2, [r3, #0]
            OutPutDataFeedBack->dataLength = 0x01;
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	2201      	movs	r2, #1
 8000d36:	729a      	strb	r2, [r3, #10]
            if(e_parseStatus_error != parseStatus)
 8000d38:	7ffb      	ldrb	r3, [r7, #31]
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d01b      	beq.n	8000d76 <handleDataFrame+0x86>
            {
                /* check data = 0 or =1*/
                if((0x00 == Output.data[0]) || (0x01 == Output.data[0]))
 8000d3e:	7d3b      	ldrb	r3, [r7, #20]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d002      	beq.n	8000d4a <handleDataFrame+0x5a>
 8000d44:	7d3b      	ldrb	r3, [r7, #20]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d111      	bne.n	8000d6e <handleDataFrame+0x7e>
                {
                    /* control fan*/
                    switch (Output.data[0])
 8000d4a:	7d3b      	ldrb	r3, [r7, #20]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d002      	beq.n	8000d56 <handleDataFrame+0x66>
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d004      	beq.n	8000d5e <handleDataFrame+0x6e>
                     case 0x01:
                        /* code */
                        GPIO_callBackFuction(true);
                        break;
                    default:
                        break;
 8000d54:	e007      	b.n	8000d66 <handleDataFrame+0x76>
                        GPIO_callBackFuction(false);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2000      	movs	r0, #0
 8000d5a:	4798      	blx	r3
                        break;
 8000d5c:	e003      	b.n	8000d66 <handleDataFrame+0x76>
                        GPIO_callBackFuction(true);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2001      	movs	r0, #1
 8000d62:	4798      	blx	r3
                        break;
 8000d64:	bf00      	nop
                    }

                    OutPutDataFeedBack->data[0] = 0x00;
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	711a      	strb	r2, [r3, #4]
            else
            {
                /* setup frame feed back*/
                OutPutDataFeedBack->data[0] = 0xFF;
            }
            break;
 8000d6c:	e05c      	b.n	8000e28 <handleDataFrame+0x138>
                    OutPutDataFeedBack->data[0] = 0x01;
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	2201      	movs	r2, #1
 8000d72:	711a      	strb	r2, [r3, #4]
            break;
 8000d74:	e058      	b.n	8000e28 <handleDataFrame+0x138>
                OutPutDataFeedBack->data[0] = 0xFF;
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	22ff      	movs	r2, #255	; 0xff
 8000d7a:	711a      	strb	r2, [r3, #4]
            break;
 8000d7c:	e054      	b.n	8000e28 <handleDataFrame+0x138>
        case ID_RECEIVED_SELECT_AUTO_MANUAL_MODE:
            /* setup frame feed back*/
            OutPutDataFeedBack->Id_Byte = ID_FEEDBACK_SELECT_AUTO_MANUAL_MODE;
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	2282      	movs	r2, #130	; 0x82
 8000d82:	601a      	str	r2, [r3, #0]
            OutPutDataFeedBack->dataLength = 0x01;
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	2201      	movs	r2, #1
 8000d88:	729a      	strb	r2, [r3, #10]
            if(e_parseStatus_error != parseStatus)
 8000d8a:	7ffb      	ldrb	r3, [r7, #31]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d00d      	beq.n	8000dac <handleDataFrame+0xbc>
            {
                /* check data = 0 or =1*/
                if((0x00 == Output.data[0]) || (0x01 == Output.data[0]))
 8000d90:	7d3b      	ldrb	r3, [r7, #20]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d002      	beq.n	8000d9c <handleDataFrame+0xac>
 8000d96:	7d3b      	ldrb	r3, [r7, #20]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d103      	bne.n	8000da4 <handleDataFrame+0xb4>
                {
                    /* control fan mode*/


                    OutPutDataFeedBack->data[0] = 0x00;
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	711a      	strb	r2, [r3, #4]
            }
            else
            {
                OutPutDataFeedBack->data[0] = 0xFF;
            }
            break;
 8000da2:	e041      	b.n	8000e28 <handleDataFrame+0x138>
                    OutPutDataFeedBack->data[0] = 0x01;
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	2201      	movs	r2, #1
 8000da8:	711a      	strb	r2, [r3, #4]
            break;
 8000daa:	e03d      	b.n	8000e28 <handleDataFrame+0x138>
                OutPutDataFeedBack->data[0] = 0xFF;
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	22ff      	movs	r2, #255	; 0xff
 8000db0:	711a      	strb	r2, [r3, #4]
            break;
 8000db2:	e039      	b.n	8000e28 <handleDataFrame+0x138>

        case ID_RECEIVED_SELECT_WIND_LEVEL_MODE:
            /* setup frame feed back*/
            OutPutDataFeedBack->Id_Byte = ID_FEEDBACK_SELECT_WIND_LEVEL_MODE;
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	2283      	movs	r2, #131	; 0x83
 8000db8:	601a      	str	r2, [r3, #0]
            OutPutDataFeedBack->dataLength = 0x01;
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	729a      	strb	r2, [r3, #10]
            if(e_parseStatus_error != parseStatus)
 8000dc0:	7ffb      	ldrb	r3, [r7, #31]
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d010      	beq.n	8000de8 <handleDataFrame+0xf8>
            {
                /* check data = 0 or =1*/
                if((0x00 == Output.data[0]) || (0x01 == Output.data[0]) || (0x02 == Output.data[0]))
 8000dc6:	7d3b      	ldrb	r3, [r7, #20]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d005      	beq.n	8000dd8 <handleDataFrame+0xe8>
 8000dcc:	7d3b      	ldrb	r3, [r7, #20]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d002      	beq.n	8000dd8 <handleDataFrame+0xe8>
 8000dd2:	7d3b      	ldrb	r3, [r7, #20]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d103      	bne.n	8000de0 <handleDataFrame+0xf0>
                {
                    /* control fan mode*/


                    OutPutDataFeedBack->data[0] = 0x00;
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	711a      	strb	r2, [r3, #4]
            }
            else
            {
                OutPutDataFeedBack->data[0] = 0xFF;
            }
            break;
 8000dde:	e023      	b.n	8000e28 <handleDataFrame+0x138>
                    OutPutDataFeedBack->data[0] = 0x01;
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	2201      	movs	r2, #1
 8000de4:	711a      	strb	r2, [r3, #4]
            break;
 8000de6:	e01f      	b.n	8000e28 <handleDataFrame+0x138>
                OutPutDataFeedBack->data[0] = 0xFF;
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	22ff      	movs	r2, #255	; 0xff
 8000dec:	711a      	strb	r2, [r3, #4]
            break;
 8000dee:	e01b      	b.n	8000e28 <handleDataFrame+0x138>
        case ID_RECEIVED_SELECT_READ_ALL_STATUS_MODE:
            /* setup frame feed back*/
            OutPutDataFeedBack->Id_Byte = ID_FEEDBACK_SELECT_READ_ALL_STATUS_MODE;
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	2284      	movs	r2, #132	; 0x84
 8000df4:	601a      	str	r2, [r3, #0]
          if(e_parseStatus_error != parseStatus)
 8000df6:	7ffb      	ldrb	r3, [r7, #31]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d009      	beq.n	8000e10 <handleDataFrame+0x120>
            {
                if(0x00 == Output.dataLength)
 8000dfc:	7ebb      	ldrb	r3, [r7, #26]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d111      	bne.n	8000e26 <handleDataFrame+0x136>
                {
                    OutPutDataFeedBack->data[0] = 0x00;
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	2200      	movs	r2, #0
 8000e06:	711a      	strb	r2, [r3, #4]
                    OutPutDataFeedBack->dataLength = 0x05;
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	2205      	movs	r2, #5
 8000e0c:	729a      	strb	r2, [r3, #10]
            else
            {
                OutPutDataFeedBack->dataLength = 0x01;
                OutPutDataFeedBack->data[0] = 0xFF;
            }
            break;
 8000e0e:	e00a      	b.n	8000e26 <handleDataFrame+0x136>
                OutPutDataFeedBack->dataLength = 0x01;
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	2201      	movs	r2, #1
 8000e14:	729a      	strb	r2, [r3, #10]
                OutPutDataFeedBack->data[0] = 0xFF;
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	22ff      	movs	r2, #255	; 0xff
 8000e1a:	711a      	strb	r2, [r3, #4]
            break;
 8000e1c:	e003      	b.n	8000e26 <handleDataFrame+0x136>
        default:
            status = e_parseStatus_error;
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <handleDataFrame+0x144>)
 8000e20:	2202      	movs	r2, #2
 8000e22:	701a      	strb	r2, [r3, #0]
            break;
 8000e24:	e000      	b.n	8000e28 <handleDataFrame+0x138>
            break;
 8000e26:	bf00      	nop
    }
    return status;
 8000e28:	4b02      	ldr	r3, [pc, #8]	; (8000e34 <handleDataFrame+0x144>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3720      	adds	r7, #32
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000014 	.word	0x20000014

08000e38 <CreateSendFeedBackFrame>:

void CreateSendFeedBackFrame(parse_data_line_struct_t *OutPutDataFeedBack, uint8_t* frameData, uint8_t* frameSize)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b087      	sub	sp, #28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
    uint8_t Index =0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	75fb      	strb	r3, [r7, #23]
    frameData[0] = 0x02;
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	701a      	strb	r2, [r3, #0]
    frameData[1] = OutPutDataFeedBack->Id_Byte;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	3301      	adds	r3, #1
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	701a      	strb	r2, [r3, #0]
    frameData[2] = OutPutDataFeedBack->dataLength;
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	7a92      	ldrb	r2, [r2, #10]
 8000e62:	701a      	strb	r2, [r3, #0]
    for(Index = 0; Index < OutPutDataFeedBack->dataLength; Index++)
 8000e64:	2300      	movs	r3, #0
 8000e66:	75fb      	strb	r3, [r7, #23]
 8000e68:	e00c      	b.n	8000e84 <CreateSendFeedBackFrame+0x4c>
    {
        frameData[3+Index] = OutPutDataFeedBack->data[Index];
 8000e6a:	7dfa      	ldrb	r2, [r7, #23]
 8000e6c:	7dfb      	ldrb	r3, [r7, #23]
 8000e6e:	3303      	adds	r3, #3
 8000e70:	4619      	mov	r1, r3
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	440b      	add	r3, r1
 8000e76:	68f9      	ldr	r1, [r7, #12]
 8000e78:	440a      	add	r2, r1
 8000e7a:	7912      	ldrb	r2, [r2, #4]
 8000e7c:	701a      	strb	r2, [r3, #0]
    for(Index = 0; Index < OutPutDataFeedBack->dataLength; Index++)
 8000e7e:	7dfb      	ldrb	r3, [r7, #23]
 8000e80:	3301      	adds	r3, #1
 8000e82:	75fb      	strb	r3, [r7, #23]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	7a9b      	ldrb	r3, [r3, #10]
 8000e88:	7dfa      	ldrb	r2, [r7, #23]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d3ed      	bcc.n	8000e6a <CreateSendFeedBackFrame+0x32>
    }
    frameData[3+OutPutDataFeedBack->dataLength] = 0x03;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	7a9b      	ldrb	r3, [r3, #10]
 8000e92:	3303      	adds	r3, #3
 8000e94:	461a      	mov	r2, r3
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	4413      	add	r3, r2
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	701a      	strb	r2, [r3, #0]
    *frameSize = 4 + OutPutDataFeedBack->dataLength;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	7a9b      	ldrb	r3, [r3, #10]
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	701a      	strb	r2, [r3, #0]
}
 8000eaa:	bf00      	nop
 8000eac:	371c      	adds	r7, #28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <NVIC_Configuration>:
#include <stdint.h>
#include "misc_middleware.h"


void NVIC_Configuration(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Configure the NVIC Preemption Priority Bits */  
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 8000eba:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8000ebe:	f7ff facb 	bl	8000458 <NVIC_PriorityGroupConfig>

    /* Enable the USARTy Interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 8000ec2:	2325      	movs	r3, #37	; 0x25
 8000ec4:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fad3 	bl	800047c <NVIC_Init>

}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <queue_init>:

queue_struct_t s_queueList;

/* fuction initiallize a queue with no data*/
void queue_init(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
    s_queueList.getIndex = 0;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <queue_init+0x20>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
    s_queueList.putIndex = 0;
 8000eea:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <queue_init+0x20>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	705a      	strb	r2, [r3, #1]
    s_queueList.size = 0;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <queue_init+0x20>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	709a      	strb	r2, [r3, #2]
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	2000004c 	.word	0x2000004c

08000f04 <queue_isEmpty>:


/* Check if queue is empty or not */
bool queue_isEmpty()
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
    bool returnValue = false;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	71fb      	strb	r3, [r7, #7]
    if(s_queueList.size == 0)
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <queue_isEmpty+0x24>)
 8000f10:	789b      	ldrb	r3, [r3, #2]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <queue_isEmpty+0x16>
    {
        returnValue = true;
 8000f16:	2301      	movs	r3, #1
 8000f18:	71fb      	strb	r3, [r7, #7]
    }

    return returnValue;
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	2000004c 	.word	0x2000004c

08000f2c <queue_isFull>:

/* Check if queue is full or not */
bool queue_isFull(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
    bool returnValue = false;
 8000f32:	2300      	movs	r3, #0
 8000f34:	71fb      	strb	r3, [r7, #7]
    if(s_queueList.size == MAX_QUEUE_SIZE)
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <queue_isFull+0x24>)
 8000f38:	789b      	ldrb	r3, [r3, #2]
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	d101      	bne.n	8000f42 <queue_isFull+0x16>
    {
        returnValue = true;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	71fb      	strb	r3, [r7, #7]
    }

    return returnValue;
 8000f42:	79fb      	ldrb	r3, [r7, #7]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	2000004c 	.word	0x2000004c

08000f54 <queue_put_newLine>:

/*function increase index and size when put data to queue*/
bool queue_put_newLine(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
    bool val = true;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	71fb      	strb	r3, [r7, #7]
    if(queue_isFull() == false) /*if queue list not full*/
 8000f5e:	f7ff ffe5 	bl	8000f2c <queue_isFull>
 8000f62:	4603      	mov	r3, r0
 8000f64:	f083 0301 	eor.w	r3, r3, #1
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00f      	beq.n	8000f8e <queue_put_newLine+0x3a>
    {
        s_queueList.putIndex++;
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <queue_put_newLine+0x48>)
 8000f70:	785b      	ldrb	r3, [r3, #1]
 8000f72:	3301      	adds	r3, #1
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <queue_put_newLine+0x48>)
 8000f78:	705a      	strb	r2, [r3, #1]
        s_queueList.size++;
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <queue_put_newLine+0x48>)
 8000f7c:	789b      	ldrb	r3, [r3, #2]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <queue_put_newLine+0x48>)
 8000f84:	709a      	strb	r2, [r3, #2]
        dataIndex=0;
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <queue_put_newLine+0x4c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	801a      	strh	r2, [r3, #0]
 8000f8c:	e001      	b.n	8000f92 <queue_put_newLine+0x3e>
    }
    else
    {
        val = false;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	71fb      	strb	r3, [r7, #7]
    }

    return val;
 8000f92:	79fb      	ldrb	r3, [r7, #7]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	2000004c 	.word	0x2000004c
 8000fa0:	2000004a 	.word	0x2000004a

08000fa4 <queue_get>:

/*function increase index and reduce size when get data from queue*/
bool queue_get(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
    bool val = true;
 8000faa:	2301      	movs	r3, #1
 8000fac:	71fb      	strb	r3, [r7, #7]
    if(queue_isEmpty() == false) /*if queue list not empty*/
 8000fae:	f7ff ffa9 	bl	8000f04 <queue_isEmpty>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	f083 0301 	eor.w	r3, r3, #1
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d00c      	beq.n	8000fd8 <queue_get+0x34>
    {
        s_queueList.getIndex++;
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <queue_get+0x44>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <queue_get+0x44>)
 8000fc8:	701a      	strb	r2, [r3, #0]
        s_queueList.size--;
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <queue_get+0x44>)
 8000fcc:	789b      	ldrb	r3, [r3, #2]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <queue_get+0x44>)
 8000fd4:	709a      	strb	r2, [r3, #2]
 8000fd6:	e001      	b.n	8000fdc <queue_get+0x38>
    }
    else
    {
        val = false;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	71fb      	strb	r3, [r7, #7]
    }

    return val;
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	2000004c 	.word	0x2000004c

08000fec <queue_push_data>:


/* function push data to each line */ 
void queue_push_data(uint8_t data)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
    uint8_t putIndex = 0xFF;
 8000ff6:	23ff      	movs	r3, #255	; 0xff
 8000ff8:	73fb      	strb	r3, [r7, #15]
    putIndex = s_queueList.putIndex % MAX_QUEUE_SIZE;
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <queue_push_data+0x4c>)
 8000ffc:	785b      	ldrb	r3, [r3, #1]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
 8001002:	73fb      	strb	r3, [r7, #15]
    s_queueList.queue_data[putIndex][dataIndex] = data;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	4a0d      	ldr	r2, [pc, #52]	; (800103c <queue_push_data+0x50>)
 8001008:	8812      	ldrh	r2, [r2, #0]
 800100a:	4610      	mov	r0, r2
 800100c:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <queue_push_data+0x4c>)
 800100e:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8001012:	fb01 f303 	mul.w	r3, r1, r3
 8001016:	4413      	add	r3, r2
 8001018:	4403      	add	r3, r0
 800101a:	3303      	adds	r3, #3
 800101c:	79fa      	ldrb	r2, [r7, #7]
 800101e:	701a      	strb	r2, [r3, #0]
    dataIndex++;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <queue_push_data+0x50>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	3301      	adds	r3, #1
 8001026:	b29a      	uxth	r2, r3
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <queue_push_data+0x50>)
 800102a:	801a      	strh	r2, [r3, #0]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	2000004c 	.word	0x2000004c
 800103c:	2000004a 	.word	0x2000004a

08001040 <queue_pop>:

/* fuction pop data line in order to parse data */
uint8_t* queue_pop(void)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
    uint8_t *ptrReturn;
    uint8_t getIndex = 0xFF;
 8001046:	23ff      	movs	r3, #255	; 0xff
 8001048:	71fb      	strb	r3, [r7, #7]
    getIndex = s_queueList.getIndex % MAX_QUEUE_SIZE;
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <queue_pop+0x34>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	71fb      	strb	r3, [r7, #7]
    ptrReturn = s_queueList.queue_data[getIndex];
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800105a:	fb02 f303 	mul.w	r3, r2, r3
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <queue_pop+0x34>)
 8001060:	4413      	add	r3, r2
 8001062:	3303      	adds	r3, #3
 8001064:	603b      	str	r3, [r7, #0]

    return ptrReturn;
 8001066:	683b      	ldr	r3, [r7, #0]
}
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	2000004c 	.word	0x2000004c

08001078 <RCC_Configuration>:
#include <stdint.h>
#include "rcc_middleware.h"


void RCC_Configuration(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE); // Enable the GPIOC clock
 800107c:	2101      	movs	r1, #1
 800107e:	2010      	movs	r0, #16
 8001080:	f7ff fb14 	bl	80006ac <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE); // Enable the GPIOA clock
 8001084:	2101      	movs	r1, #1
 8001086:	2004      	movs	r0, #4
 8001088:	f7ff fb10 	bl	80006ac <RCC_APB2PeriphClockCmd>

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 800108c:	2101      	movs	r1, #1
 800108e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001092:	f7ff fb0b 	bl	80006ac <RCC_APB2PeriphClockCmd>
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <USART_Configuration>:
#include <stdint.h>
#include "uart_middleware.h"


void USART_Configuration(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;

    USART_InitStructure.USART_BaudRate = 9600;
 80010a2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80010a6:	603b      	str	r3, [r7, #0]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80010a8:	2300      	movs	r3, #0
 80010aa:	80bb      	strh	r3, [r7, #4]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	80fb      	strh	r3, [r7, #6]
    USART_InitStructure.USART_Parity = USART_Parity_No;
 80010b0:	2300      	movs	r3, #0
 80010b2:	813b      	strh	r3, [r7, #8]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80010b4:	2300      	movs	r3, #0
 80010b6:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80010b8:	230c      	movs	r3, #12
 80010ba:	817b      	strh	r3, [r7, #10]

  /* Configure USART1 */
  USART_Init(USART1, &USART_InitStructure);
 80010bc:	463b      	mov	r3, r7
 80010be:	4619      	mov	r1, r3
 80010c0:	480b      	ldr	r0, [pc, #44]	; (80010f0 <USART_Configuration+0x54>)
 80010c2:	f7ff fb11 	bl	80006e8 <USART_Init>
  /* Enable USART1 Receive and Transmit interrupts */
  USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 80010c6:	2201      	movs	r2, #1
 80010c8:	f240 5125 	movw	r1, #1317	; 0x525
 80010cc:	4808      	ldr	r0, [pc, #32]	; (80010f0 <USART_Configuration+0x54>)
 80010ce:	f7ff fbe4 	bl	800089a <USART_ITConfig>
  USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f240 7127 	movw	r1, #1831	; 0x727
 80010d8:	4805      	ldr	r0, [pc, #20]	; (80010f0 <USART_Configuration+0x54>)
 80010da:	f7ff fbde 	bl	800089a <USART_ITConfig>

/* Enable the USART1 */
  USART_Cmd(USART1, ENABLE);
 80010de:	2101      	movs	r1, #1
 80010e0:	4803      	ldr	r0, [pc, #12]	; (80010f0 <USART_Configuration+0x54>)
 80010e2:	f7ff fbbb 	bl	800085c <USART_Cmd>

}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40013800 	.word	0x40013800

080010f4 <USART1_transmit>:

void USART1_transmit()
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
    USART_ITConfig(USART1, USART_IT_RXNE, DISABLE);
 80010f8:	2200      	movs	r2, #0
 80010fa:	f240 5125 	movw	r1, #1317	; 0x525
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <USART1_transmit+0x20>)
 8001100:	f7ff fbcb 	bl	800089a <USART_ITConfig>
    USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
 8001104:	2201      	movs	r2, #1
 8001106:	f240 7127 	movw	r1, #1831	; 0x727
 800110a:	4802      	ldr	r0, [pc, #8]	; (8001114 <USART1_transmit+0x20>)
 800110c:	f7ff fbc5 	bl	800089a <USART_ITConfig>

}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40013800 	.word	0x40013800

08001118 <main>:
 */

#include <stdint.h>
#include <app.h>
int main(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  app_init();
 800111c:	f7ff f828 	bl	8000170 <app_init>
  StartProgram();
 8001120:	f7ff f842 	bl	80001a8 <StartProgram>
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <SystemInit+0x5c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a14      	ldr	r2, [pc, #80]	; (8001188 <SystemInit+0x5c>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <SystemInit+0x5c>)
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	4911      	ldr	r1, [pc, #68]	; (8001188 <SystemInit+0x5c>)
 8001142:	4b12      	ldr	r3, [pc, #72]	; (800118c <SystemInit+0x60>)
 8001144:	4013      	ands	r3, r2
 8001146:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <SystemInit+0x5c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <SystemInit+0x5c>)
 800114e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001156:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <SystemInit+0x5c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <SystemInit+0x5c>)
 800115e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001162:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <SystemInit+0x5c>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	4a07      	ldr	r2, [pc, #28]	; (8001188 <SystemInit+0x5c>)
 800116a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800116e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <SystemInit+0x5c>)
 8001172:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001176:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001178:	f000 f80c 	bl	8001194 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <SystemInit+0x64>)
 800117e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001182:	609a      	str	r2, [r3, #8]
#endif 
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40021000 	.word	0x40021000
 800118c:	f8ff0000 	.word	0xf8ff0000
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001198:	f000 f802 	bl	80011a0 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}

080011a0 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	2300      	movs	r3, #0
 80011ac:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80011ae:	4b3a      	ldr	r3, [pc, #232]	; (8001298 <SetSysClockTo72+0xf8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a39      	ldr	r2, [pc, #228]	; (8001298 <SetSysClockTo72+0xf8>)
 80011b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80011ba:	4b37      	ldr	r3, [pc, #220]	; (8001298 <SetSysClockTo72+0xf8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3301      	adds	r3, #1
 80011c8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d103      	bne.n	80011d8 <SetSysClockTo72+0x38>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80011d6:	d1f0      	bne.n	80011ba <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80011d8:	4b2f      	ldr	r3, [pc, #188]	; (8001298 <SetSysClockTo72+0xf8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d002      	beq.n	80011ea <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80011e4:	2301      	movs	r3, #1
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	e001      	b.n	80011ee <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80011ea:	2300      	movs	r3, #0
 80011ec:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d14b      	bne.n	800128c <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80011f4:	4b29      	ldr	r3, [pc, #164]	; (800129c <SetSysClockTo72+0xfc>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a28      	ldr	r2, [pc, #160]	; (800129c <SetSysClockTo72+0xfc>)
 80011fa:	f043 0310 	orr.w	r3, r3, #16
 80011fe:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001200:	4b26      	ldr	r3, [pc, #152]	; (800129c <SetSysClockTo72+0xfc>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a25      	ldr	r2, [pc, #148]	; (800129c <SetSysClockTo72+0xfc>)
 8001206:	f023 0303 	bic.w	r3, r3, #3
 800120a:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800120c:	4b23      	ldr	r3, [pc, #140]	; (800129c <SetSysClockTo72+0xfc>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a22      	ldr	r2, [pc, #136]	; (800129c <SetSysClockTo72+0xfc>)
 8001212:	f043 0302 	orr.w	r3, r3, #2
 8001216:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001218:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <SetSysClockTo72+0xf8>)
 800121a:	4a1f      	ldr	r2, [pc, #124]	; (8001298 <SetSysClockTo72+0xf8>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <SetSysClockTo72+0xf8>)
 8001222:	4a1d      	ldr	r2, [pc, #116]	; (8001298 <SetSysClockTo72+0xf8>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <SetSysClockTo72+0xf8>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	4a1a      	ldr	r2, [pc, #104]	; (8001298 <SetSysClockTo72+0xf8>)
 800122e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001232:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <SetSysClockTo72+0xf8>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	4a17      	ldr	r2, [pc, #92]	; (8001298 <SetSysClockTo72+0xf8>)
 800123a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800123e:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <SetSysClockTo72+0xf8>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	4a14      	ldr	r2, [pc, #80]	; (8001298 <SetSysClockTo72+0xf8>)
 8001246:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800124a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <SetSysClockTo72+0xf8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a11      	ldr	r2, [pc, #68]	; (8001298 <SetSysClockTo72+0xf8>)
 8001252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001256:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001258:	bf00      	nop
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <SetSysClockTo72+0xf8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f9      	beq.n	800125a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <SetSysClockTo72+0xf8>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <SetSysClockTo72+0xf8>)
 800126c:	f023 0303 	bic.w	r3, r3, #3
 8001270:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <SetSysClockTo72+0xf8>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	4a08      	ldr	r2, [pc, #32]	; (8001298 <SetSysClockTo72+0xf8>)
 8001278:	f043 0302 	orr.w	r3, r3, #2
 800127c:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800127e:	bf00      	nop
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <SetSysClockTo72+0xf8>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 030c 	and.w	r3, r3, #12
 8001288:	2b08      	cmp	r3, #8
 800128a:	d1f9      	bne.n	8001280 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000
 800129c:	40022000 	.word	0x40022000

080012a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012a4:	f7ff ff42 	bl	800112c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a8:	480c      	ldr	r0, [pc, #48]	; (80012dc <LoopForever+0x6>)
  ldr r1, =_edata
 80012aa:	490d      	ldr	r1, [pc, #52]	; (80012e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012ac:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <LoopForever+0xe>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b0:	e002      	b.n	80012b8 <LoopCopyDataInit>

080012b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b6:	3304      	adds	r3, #4

080012b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012bc:	d3f9      	bcc.n	80012b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012c0:	4c0a      	ldr	r4, [pc, #40]	; (80012ec <LoopForever+0x16>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c4:	e001      	b.n	80012ca <LoopFillZerobss>

080012c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c8:	3204      	adds	r2, #4

080012ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012cc:	d3fb      	bcc.n	80012c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012ce:	f000 f811 	bl	80012f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012d2:	f7ff ff21 	bl	8001118 <main>

080012d6 <LoopForever>:

LoopForever:
    b LoopForever
 80012d6:	e7fe      	b.n	80012d6 <LoopForever>
  ldr   r0, =_estack
 80012d8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80012dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80012e4:	0800135c 	.word	0x0800135c
  ldr r2, =_sbss
 80012e8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80012ec:	20000880 	.word	0x20000880

080012f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012f0:	e7fe      	b.n	80012f0 <ADC1_2_IRQHandler>
	...

080012f4 <__libc_init_array>:
 80012f4:	b570      	push	{r4, r5, r6, lr}
 80012f6:	2600      	movs	r6, #0
 80012f8:	4d0c      	ldr	r5, [pc, #48]	; (800132c <__libc_init_array+0x38>)
 80012fa:	4c0d      	ldr	r4, [pc, #52]	; (8001330 <__libc_init_array+0x3c>)
 80012fc:	1b64      	subs	r4, r4, r5
 80012fe:	10a4      	asrs	r4, r4, #2
 8001300:	42a6      	cmp	r6, r4
 8001302:	d109      	bne.n	8001318 <__libc_init_array+0x24>
 8001304:	f000 f81a 	bl	800133c <_init>
 8001308:	2600      	movs	r6, #0
 800130a:	4d0a      	ldr	r5, [pc, #40]	; (8001334 <__libc_init_array+0x40>)
 800130c:	4c0a      	ldr	r4, [pc, #40]	; (8001338 <__libc_init_array+0x44>)
 800130e:	1b64      	subs	r4, r4, r5
 8001310:	10a4      	asrs	r4, r4, #2
 8001312:	42a6      	cmp	r6, r4
 8001314:	d105      	bne.n	8001322 <__libc_init_array+0x2e>
 8001316:	bd70      	pop	{r4, r5, r6, pc}
 8001318:	f855 3b04 	ldr.w	r3, [r5], #4
 800131c:	4798      	blx	r3
 800131e:	3601      	adds	r6, #1
 8001320:	e7ee      	b.n	8001300 <__libc_init_array+0xc>
 8001322:	f855 3b04 	ldr.w	r3, [r5], #4
 8001326:	4798      	blx	r3
 8001328:	3601      	adds	r6, #1
 800132a:	e7f2      	b.n	8001312 <__libc_init_array+0x1e>
 800132c:	08001354 	.word	0x08001354
 8001330:	08001354 	.word	0x08001354
 8001334:	08001354 	.word	0x08001354
 8001338:	08001358 	.word	0x08001358

0800133c <_init>:
 800133c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800133e:	bf00      	nop
 8001340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001342:	bc08      	pop	{r3}
 8001344:	469e      	mov	lr, r3
 8001346:	4770      	bx	lr

08001348 <_fini>:
 8001348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800134a:	bf00      	nop
 800134c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800134e:	bc08      	pop	{r3}
 8001350:	469e      	mov	lr, r3
 8001352:	4770      	bx	lr
