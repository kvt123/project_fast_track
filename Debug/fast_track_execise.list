
fast_track_execise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001190  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080012c0  080012c0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080012c0  080012c0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080012c0  080012c0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012c0  080012c0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012c0  080012c0  000112c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012c4  080012c4  000112c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080012c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000854  20000018  080012e0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000086c  080012e0  0002086c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003c18  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001040  00000000  00000000  00023c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000570  00000000  00000000  00024ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004b8  00000000  00000000  00025210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000c09d  00000000  00000000  000256c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000058c6  00000000  00000000  00031765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003d7de  00000000  00000000  0003702b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00074809  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014b0  00000000  00000000  0007485c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000018 	.word	0x20000018
 800014c:	00000000 	.word	0x00000000
 8000150:	080012a8 	.word	0x080012a8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000001c 	.word	0x2000001c
 800016c:	080012a8 	.word	0x080012a8

08000170 <RCC_Configuration>:
static void ControlLed(bool PinState);



void RCC_Configuration(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE); // Enable the GPIOC clock
 8000174:	2101      	movs	r1, #1
 8000176:	2010      	movs	r0, #16
 8000178:	f000 fc2e 	bl	80009d8 <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE); // Enable the GPIOA clock
 800017c:	2101      	movs	r1, #1
 800017e:	2004      	movs	r0, #4
 8000180:	f000 fc2a 	bl	80009d8 <RCC_APB2PeriphClockCmd>

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000184:	2101      	movs	r1, #1
 8000186:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800018a:	f000 fc25 	bl	80009d8 <RCC_APB2PeriphClockCmd>
}
 800018e:	bf00      	nop
 8000190:	bd80      	pop	{r7, pc}

08000192 <NVIC_Configuration>:


void NVIC_Configuration(void)
{
 8000192:	b580      	push	{r7, lr}
 8000194:	b082      	sub	sp, #8
 8000196:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Configure the NVIC Preemption Priority Bits */  
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 8000198:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 800019c:	f000 fa06 	bl	80005ac <NVIC_PriorityGroupConfig>

    /* Enable the USARTy Interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 80001a0:	2325      	movs	r3, #37	; 0x25
 80001a2:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80001a4:	2300      	movs	r3, #0
 80001a6:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80001a8:	2301      	movs	r3, #1
 80001aa:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	4618      	mov	r0, r3
 80001b0:	f000 fa0e 	bl	80005d0 <NVIC_Init>

}
 80001b4:	bf00      	nop
 80001b6:	3708      	adds	r7, #8
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}

080001bc <USART_Configuration>:

void USART_Configuration(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b084      	sub	sp, #16
 80001c0:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;

    USART_InitStructure.USART_BaudRate = 9600;
 80001c2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80001c6:	603b      	str	r3, [r7, #0]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80001c8:	2300      	movs	r3, #0
 80001ca:	80bb      	strh	r3, [r7, #4]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80001cc:	2300      	movs	r3, #0
 80001ce:	80fb      	strh	r3, [r7, #6]
    USART_InitStructure.USART_Parity = USART_Parity_No;
 80001d0:	2300      	movs	r3, #0
 80001d2:	813b      	strh	r3, [r7, #8]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80001d4:	2300      	movs	r3, #0
 80001d6:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80001d8:	230c      	movs	r3, #12
 80001da:	817b      	strh	r3, [r7, #10]

  /* Configure USART1 */
  USART_Init(USART1, &USART_InitStructure);
 80001dc:	463b      	mov	r3, r7
 80001de:	4619      	mov	r1, r3
 80001e0:	480b      	ldr	r0, [pc, #44]	; (8000210 <USART_Configuration+0x54>)
 80001e2:	f000 fc17 	bl	8000a14 <USART_Init>
  /* Enable USART1 Receive and Transmit interrupts */
  USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 80001e6:	2201      	movs	r2, #1
 80001e8:	f240 5125 	movw	r1, #1317	; 0x525
 80001ec:	4808      	ldr	r0, [pc, #32]	; (8000210 <USART_Configuration+0x54>)
 80001ee:	f000 fcea 	bl	8000bc6 <USART_ITConfig>
  USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 80001f2:	2200      	movs	r2, #0
 80001f4:	f240 7127 	movw	r1, #1831	; 0x727
 80001f8:	4805      	ldr	r0, [pc, #20]	; (8000210 <USART_Configuration+0x54>)
 80001fa:	f000 fce4 	bl	8000bc6 <USART_ITConfig>

/* Enable the USART1 */
  USART_Cmd(USART1, ENABLE);
 80001fe:	2101      	movs	r1, #1
 8000200:	4803      	ldr	r0, [pc, #12]	; (8000210 <USART_Configuration+0x54>)
 8000202:	f000 fcc1 	bl	8000b88 <USART_Cmd>

}
 8000206:	bf00      	nop
 8000208:	3710      	adds	r7, #16
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	40013800 	.word	0x40013800

08000214 <GPIO_Configuration>:

void GPIO_Configuration(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0

    GPIO_InitTypeDef InitStruct;

    /* init pin C13 for led blue*/
    InitStruct.GPIO_Pin  = GPIO_Pin_13;
 800021a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800021e:	80bb      	strh	r3, [r7, #4]
    InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8000220:	2301      	movs	r3, #1
 8000222:	71bb      	strb	r3, [r7, #6]
    InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 8000224:	2310      	movs	r3, #16
 8000226:	71fb      	strb	r3, [r7, #7]

     HAL_GPIO_Init(GPIOC, &InitStruct);
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	4619      	mov	r1, r3
 800022c:	4812      	ldr	r0, [pc, #72]	; (8000278 <GPIO_Configuration+0x64>)
 800022e:	f000 f8eb 	bl	8000408 <HAL_GPIO_Init>

      /* init button pin A2 for bootloader program*/
    InitStruct.GPIO_Pin  = GPIO_Pin_2;
 8000232:	2304      	movs	r3, #4
 8000234:	80bb      	strh	r3, [r7, #4]
    InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8000236:	2301      	movs	r3, #1
 8000238:	71bb      	strb	r3, [r7, #6]
    InitStruct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800023a:	2304      	movs	r3, #4
 800023c:	71fb      	strb	r3, [r7, #7]

     HAL_GPIO_Init(GPIOA, &InitStruct);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4619      	mov	r1, r3
 8000242:	480e      	ldr	r0, [pc, #56]	; (800027c <GPIO_Configuration+0x68>)
 8000244:	f000 f8e0 	bl	8000408 <HAL_GPIO_Init>


     /* configuration USART1 RX as input*/
    InitStruct.GPIO_Pin  = USART1_RxPin;
 8000248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800024c:	80bb      	strh	r3, [r7, #4]
    InitStruct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800024e:	2304      	movs	r3, #4
 8000250:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_Init(GPIOA, &InitStruct);
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	4619      	mov	r1, r3
 8000256:	4809      	ldr	r0, [pc, #36]	; (800027c <GPIO_Configuration+0x68>)
 8000258:	f000 f8d6 	bl	8000408 <HAL_GPIO_Init>

    /* configuration USART1 TX as input*/
    InitStruct.GPIO_Pin  = USART1_TxPin;
 800025c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000260:	80bb      	strh	r3, [r7, #4]
    InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;   ///// transmit may be wrong
 8000262:	2318      	movs	r3, #24
 8000264:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_Init(GPIOA, &InitStruct);
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	4619      	mov	r1, r3
 800026a:	4804      	ldr	r0, [pc, #16]	; (800027c <GPIO_Configuration+0x68>)
 800026c:	f000 f8cc 	bl	8000408 <HAL_GPIO_Init>



}
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	40011000 	.word	0x40011000
 800027c:	40010800 	.word	0x40010800

08000280 <USART1_transmit_string>:



void USART1_transmit_string(uint8_t *buffer, uint16_t length_buffer)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	460b      	mov	r3, r1
 800028a:	807b      	strh	r3, [r7, #2]
    uint16_t i=0;
 800028c:	2300      	movs	r3, #0
 800028e:	81fb      	strh	r3, [r7, #14]
    for(i =0; i< length_buffer; i++)
 8000290:	2300      	movs	r3, #0
 8000292:	81fb      	strh	r3, [r7, #14]
 8000294:	e01a      	b.n	80002cc <USART1_transmit_string+0x4c>
    {
//        if(USART_GetITStatus(USART1, USART_IT_TXE) != RESET)
 //       {
    if(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == SET)
 8000296:	2180      	movs	r1, #128	; 0x80
 8000298:	4811      	ldr	r0, [pc, #68]	; (80002e0 <USART1_transmit_string+0x60>)
 800029a:	f000 fcfb 	bl	8000c94 <USART_GetFlagStatus>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	d110      	bne.n	80002c6 <USART1_transmit_string+0x46>
    {
        USART_SendData(USART1, buffer[i]);
 80002a4:	89fb      	ldrh	r3, [r7, #14]
 80002a6:	687a      	ldr	r2, [r7, #4]
 80002a8:	4413      	add	r3, r2
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	b29b      	uxth	r3, r3
 80002ae:	4619      	mov	r1, r3
 80002b0:	480b      	ldr	r0, [pc, #44]	; (80002e0 <USART1_transmit_string+0x60>)
 80002b2:	f000 fccf 	bl	8000c54 <USART_SendData>
        while(USART_GetFlagStatus(USART1, USART_FLAG_TC) != SET);
 80002b6:	bf00      	nop
 80002b8:	2140      	movs	r1, #64	; 0x40
 80002ba:	4809      	ldr	r0, [pc, #36]	; (80002e0 <USART1_transmit_string+0x60>)
 80002bc:	f000 fcea 	bl	8000c94 <USART_GetFlagStatus>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d1f8      	bne.n	80002b8 <USART1_transmit_string+0x38>
    for(i =0; i< length_buffer; i++)
 80002c6:	89fb      	ldrh	r3, [r7, #14]
 80002c8:	3301      	adds	r3, #1
 80002ca:	81fb      	strh	r3, [r7, #14]
 80002cc:	89fa      	ldrh	r2, [r7, #14]
 80002ce:	887b      	ldrh	r3, [r7, #2]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	d3e0      	bcc.n	8000296 <USART1_transmit_string+0x16>
    }
    
 //       }
    }
}
 80002d4:	bf00      	nop
 80002d6:	bf00      	nop
 80002d8:	3710      	adds	r7, #16
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40013800 	.word	0x40013800

080002e4 <app_init>:
}


/* function init button,uart0, queue */
void app_init()
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0

    RCC_Configuration();
 80002e8:	f7ff ff42 	bl	8000170 <RCC_Configuration>

    /* NVIC configuration */
  NVIC_Configuration();
 80002ec:	f7ff ff51 	bl	8000192 <NVIC_Configuration>
  GPIO_Configuration();
 80002f0:	f7ff ff90 	bl	8000214 <GPIO_Configuration>

  USART_Configuration();
 80002f4:	f7ff ff62 	bl	80001bc <USART_Configuration>

  HAL_GPIO_Write_Pin(GPIOC, GPIO_Pin_13, Bit_SET);
 80002f8:	2201      	movs	r2, #1
 80002fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002fe:	4806      	ldr	r0, [pc, #24]	; (8000318 <app_init+0x34>)
 8000300:	f000 f93b 	bl	800057a <HAL_GPIO_Write_Pin>
    /*initial queue*/
    queue_init();
 8000304:	f000 f9c6 	bl	8000694 <queue_init>
    FLASH_UnlockBank1();
 8000308:	f000 fa90 	bl	800082c <FLASH_UnlockBank1>

    /* Clear All pending flags */
    FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
 800030c:	2034      	movs	r0, #52	; 0x34
 800030e:	f000 fa9f 	bl	8000850 <FLASH_ClearFlag>
}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	40011000 	.word	0x40011000

0800031c <StartProgram>:

/*function jump to Boot */
void StartProgram(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b08c      	sub	sp, #48	; 0x30
 8000320:	af00      	add	r7, sp, #0
    parse_status_t status;
    parse_data_line_struct_t Output;
    uint8_t *popBuff;
    uint32_t index;
    bool stopProgram= false;
 8000322:	2300      	movs	r3, #0
 8000324:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t frameData[20] ={0};
 8000328:	2300      	movs	r3, #0
 800032a:	60bb      	str	r3, [r7, #8]
 800032c:	f107 030c 	add.w	r3, r7, #12
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	609a      	str	r2, [r3, #8]
 8000338:	60da      	str	r2, [r3, #12]
    uint8_t frameSize;
    while(!stopProgram)
 800033a:	e023      	b.n	8000384 <StartProgram+0x68>
    {
        if(!queue_isEmpty())
 800033c:	f000 f9bc 	bl	80006b8 <queue_isEmpty>
 8000340:	4603      	mov	r3, r0
 8000342:	f083 0301 	eor.w	r3, r3, #1
 8000346:	b2db      	uxtb	r3, r3
 8000348:	2b00      	cmp	r3, #0
 800034a:	d01b      	beq.n	8000384 <StartProgram+0x68>
        {
            popBuff = queue_pop();
 800034c:	f000 fa52 	bl	80007f4 <queue_pop>
 8000350:	62b8      	str	r0, [r7, #40]	; 0x28
            handleDataFrame(popBuff, &Output,ControlLed);
 8000352:	f107 031c 	add.w	r3, r7, #28
 8000356:	4a11      	ldr	r2, [pc, #68]	; (800039c <StartProgram+0x80>)
 8000358:	4619      	mov	r1, r3
 800035a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800035c:	f000 fe28 	bl	8000fb0 <handleDataFrame>
            CreateSendFeedBackFrame(&Output, frameData, &frameSize);
 8000360:	1dfa      	adds	r2, r7, #7
 8000362:	f107 0108 	add.w	r1, r7, #8
 8000366:	f107 031c 	add.w	r3, r7, #28
 800036a:	4618      	mov	r0, r3
 800036c:	f000 fec4 	bl	80010f8 <CreateSendFeedBackFrame>
            queue_get();
 8000370:	f000 f9f2 	bl	8000758 <queue_get>
            USART1_transmit_string(frameData,frameSize);
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	b29a      	uxth	r2, r3
 8000378:	f107 0308 	add.w	r3, r7, #8
 800037c:	4611      	mov	r1, r2
 800037e:	4618      	mov	r0, r3
 8000380:	f7ff ff7e 	bl	8000280 <USART1_transmit_string>
    while(!stopProgram)
 8000384:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000388:	f083 0301 	eor.w	r3, r3, #1
 800038c:	b2db      	uxtb	r3, r3
 800038e:	2b00      	cmp	r3, #0
 8000390:	d1d4      	bne.n	800033c <StartProgram+0x20>
        }
    }
    
}
 8000392:	bf00      	nop
 8000394:	bf00      	nop
 8000396:	3730      	adds	r7, #48	; 0x30
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	080003d1 	.word	0x080003d1

080003a0 <USART1_callBackFuction>:



void USART1_callBackFuction(uint8_t ch)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
    if( 0x03 == ch)
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	2b03      	cmp	r3, #3
 80003ae:	d106      	bne.n	80003be <USART1_callBackFuction+0x1e>
    {
        queue_push_data(ch);
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 f9f4 	bl	80007a0 <queue_push_data>
        queue_put_newLine();
 80003b8:	f000 f9a6 	bl	8000708 <queue_put_newLine>
    }
    else
    {
        queue_push_data(ch);
    }
}
 80003bc:	e003      	b.n	80003c6 <USART1_callBackFuction+0x26>
        queue_push_data(ch);
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	4618      	mov	r0, r3
 80003c2:	f000 f9ed 	bl	80007a0 <queue_push_data>
}
 80003c6:	bf00      	nop
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
	...

080003d0 <ControlLed>:

static void ControlLed(bool PinState)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	71fb      	strb	r3, [r7, #7]
    if(true == PinState)
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d006      	beq.n	80003ee <ControlLed+0x1e>
    {
        HAL_GPIO_Write_Pin(GPIOC, GPIO_Pin_13,Bit_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e6:	4807      	ldr	r0, [pc, #28]	; (8000404 <ControlLed+0x34>)
 80003e8:	f000 f8c7 	bl	800057a <HAL_GPIO_Write_Pin>
    }
    else
    {
        HAL_GPIO_Write_Pin(GPIOC, GPIO_Pin_13,Bit_SET);
    }
}
 80003ec:	e005      	b.n	80003fa <ControlLed+0x2a>
        HAL_GPIO_Write_Pin(GPIOC, GPIO_Pin_13,Bit_SET);
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003f4:	4803      	ldr	r0, [pc, #12]	; (8000404 <ControlLed+0x34>)
 80003f6:	f000 f8c0 	bl	800057a <HAL_GPIO_Write_Pin>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40011000 	.word	0x40011000

08000408 <HAL_GPIO_Init>:
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_Out_PP;
}


void HAL_GPIO_Init(GPIO_TypeDef * GPIOx, GPIO_InitTypeDef * GPIO_InitStruct)
{
 8000408:	b480      	push	{r7}
 800040a:	b089      	sub	sp, #36	; 0x24
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	6039      	str	r1, [r7, #0]
    uint32_t currentMode = 0x00, currentPin = 0x00, pinPos = 0x00, pos = 0x00;
 8000412:	2300      	movs	r3, #0
 8000414:	61fb      	str	r3, [r7, #28]
 8000416:	2300      	movs	r3, #0
 8000418:	613b      	str	r3, [r7, #16]
 800041a:	2300      	movs	r3, #0
 800041c:	61bb      	str	r3, [r7, #24]
 800041e:	2300      	movs	r3, #0
 8000420:	60fb      	str	r3, [r7, #12]
    uint32_t tmpReg = 0x00, pinMask = 0x00;
 8000422:	2300      	movs	r3, #0
 8000424:	617b      	str	r3, [r7, #20]
 8000426:	2300      	movs	r3, #0
 8000428:	60bb      	str	r3, [r7, #8]


/*---------------------------- GPIO Mode Configuration -----------------------*/  

    currentMode = ((GPIO_InitStruct->GPIO_Mode) & 0x0F);
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	78db      	ldrb	r3, [r3, #3]
 800042e:	f003 030f 	and.w	r3, r3, #15
 8000432:	61fb      	str	r3, [r7, #28]

    if(((GPIO_InitStruct->GPIO_Mode)& 0x10) != 0x00)
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	78db      	ldrb	r3, [r3, #3]
 8000438:	f003 0310 	and.w	r3, r3, #16
 800043c:	2b00      	cmp	r3, #0
 800043e:	d005      	beq.n	800044c <HAL_GPIO_Init+0x44>
    {
        currentMode |=  GPIO_InitStruct->GPIO_Speed;
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	789b      	ldrb	r3, [r3, #2]
 8000444:	461a      	mov	r2, r3
 8000446:	69fb      	ldr	r3, [r7, #28]
 8000448:	4313      	orrs	r3, r2
 800044a:	61fb      	str	r3, [r7, #28]
    }

/*---------------------------- GPIO CRL Configuration ------------------------*/

    if((GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	881b      	ldrh	r3, [r3, #0]
 8000450:	b2db      	uxtb	r3, r3
 8000452:	2b00      	cmp	r3, #0
 8000454:	d041      	beq.n	80004da <HAL_GPIO_Init+0xd2>
    {

        tmpReg = GPIOx->CRL;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	617b      	str	r3, [r7, #20]
        for(pinPos=0; pinPos <0x08; pinPos++)
 800045c:	2300      	movs	r3, #0
 800045e:	61bb      	str	r3, [r7, #24]
 8000460:	e035      	b.n	80004ce <HAL_GPIO_Init+0xc6>
        {
            currentPin = 0x01 << pinPos;
 8000462:	2201      	movs	r2, #1
 8000464:	69bb      	ldr	r3, [r7, #24]
 8000466:	fa02 f303 	lsl.w	r3, r2, r3
 800046a:	613b      	str	r3, [r7, #16]
            pos = (GPIO_InitStruct->GPIO_Pin)&((uint32_t)0x00FF);
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	881b      	ldrh	r3, [r3, #0]
 8000470:	b2db      	uxtb	r3, r3
 8000472:	60fb      	str	r3, [r7, #12]
            if(pos == currentPin)
 8000474:	68fa      	ldr	r2, [r7, #12]
 8000476:	693b      	ldr	r3, [r7, #16]
 8000478:	429a      	cmp	r2, r3
 800047a:	d125      	bne.n	80004c8 <HAL_GPIO_Init+0xc0>
            {
                /* clear 4 bit using */
                pinMask = ((0x0F)<< (pinPos*4));
 800047c:	69bb      	ldr	r3, [r7, #24]
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	220f      	movs	r2, #15
 8000482:	fa02 f303 	lsl.w	r3, r2, r3
 8000486:	60bb      	str	r3, [r7, #8]
                tmpReg &= ~pinMask;
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	43db      	mvns	r3, r3
 800048c:	697a      	ldr	r2, [r7, #20]
 800048e:	4013      	ands	r3, r2
 8000490:	617b      	str	r3, [r7, #20]
                /* write user init config struct value to CRL */
                tmpReg |= currentMode << (pinPos*4);
 8000492:	69bb      	ldr	r3, [r7, #24]
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	69fa      	ldr	r2, [r7, #28]
 8000498:	fa02 f303 	lsl.w	r3, r2, r3
 800049c:	697a      	ldr	r2, [r7, #20]
 800049e:	4313      	orrs	r3, r2
 80004a0:	617b      	str	r3, [r7, #20]

                /* Reset the corresponding ODR bit */
                if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	78db      	ldrb	r3, [r3, #3]
 80004a6:	2b28      	cmp	r3, #40	; 0x28
 80004a8:	d105      	bne.n	80004b6 <HAL_GPIO_Init+0xae>
                {
                  GPIOx->BRR = (((uint32_t)0x01) << pinPos);
 80004aa:	2201      	movs	r2, #1
 80004ac:	69bb      	ldr	r3, [r7, #24]
 80004ae:	409a      	lsls	r2, r3
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	615a      	str	r2, [r3, #20]
 80004b4:	e008      	b.n	80004c8 <HAL_GPIO_Init+0xc0>
                }
                else
                {
                  /* Set the corresponding ODR bit */
                  if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	78db      	ldrb	r3, [r3, #3]
 80004ba:	2b48      	cmp	r3, #72	; 0x48
 80004bc:	d104      	bne.n	80004c8 <HAL_GPIO_Init+0xc0>
                  {
                    GPIOx->BSRR = (((uint32_t)0x01) << pinPos);
 80004be:	2201      	movs	r2, #1
 80004c0:	69bb      	ldr	r3, [r7, #24]
 80004c2:	409a      	lsls	r2, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	611a      	str	r2, [r3, #16]
        for(pinPos=0; pinPos <0x08; pinPos++)
 80004c8:	69bb      	ldr	r3, [r7, #24]
 80004ca:	3301      	adds	r3, #1
 80004cc:	61bb      	str	r3, [r7, #24]
 80004ce:	69bb      	ldr	r3, [r7, #24]
 80004d0:	2b07      	cmp	r3, #7
 80004d2:	d9c6      	bls.n	8000462 <HAL_GPIO_Init+0x5a>
                

            }
        }

        GPIOx->CRL = tmpReg;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	697a      	ldr	r2, [r7, #20]
 80004d8:	601a      	str	r2, [r3, #0]
    }


/*---------------------------- GPIO CRH Configuration ------------------------*/

    if(((GPIO_InitStruct->GPIO_Pin) & 0xFF00) != 0x00)
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	881b      	ldrh	r3, [r3, #0]
 80004de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d044      	beq.n	8000570 <HAL_GPIO_Init+0x168>
    {

        tmpReg = GPIOx->CRH;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	617b      	str	r3, [r7, #20]
        for(pinPos=0; pinPos <0x08; pinPos++)
 80004ec:	2300      	movs	r3, #0
 80004ee:	61bb      	str	r3, [r7, #24]
 80004f0:	e038      	b.n	8000564 <HAL_GPIO_Init+0x15c>
        {
            currentPin = 0x01 << pinPos;
 80004f2:	2201      	movs	r2, #1
 80004f4:	69bb      	ldr	r3, [r7, #24]
 80004f6:	fa02 f303 	lsl.w	r3, r2, r3
 80004fa:	613b      	str	r3, [r7, #16]

            pos = ((GPIO_InitStruct->GPIO_Pin)>>8)&((uint32_t)0x00FF);
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	881b      	ldrh	r3, [r3, #0]
 8000500:	0a1b      	lsrs	r3, r3, #8
 8000502:	b29b      	uxth	r3, r3
 8000504:	b2db      	uxtb	r3, r3
 8000506:	60fb      	str	r3, [r7, #12]
            if(pos == currentPin)
 8000508:	68fa      	ldr	r2, [r7, #12]
 800050a:	693b      	ldr	r3, [r7, #16]
 800050c:	429a      	cmp	r2, r3
 800050e:	d126      	bne.n	800055e <HAL_GPIO_Init+0x156>
            {
                /* clear 4 bit using */
                pinMask = ((0x0F)<< (pinPos*4));
 8000510:	69bb      	ldr	r3, [r7, #24]
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	220f      	movs	r2, #15
 8000516:	fa02 f303 	lsl.w	r3, r2, r3
 800051a:	60bb      	str	r3, [r7, #8]
                tmpReg &= ~pinMask;
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	43db      	mvns	r3, r3
 8000520:	697a      	ldr	r2, [r7, #20]
 8000522:	4013      	ands	r3, r2
 8000524:	617b      	str	r3, [r7, #20]
                /* write user init config struct value to CRL */
                tmpReg |= currentMode << (pinPos*4);
 8000526:	69bb      	ldr	r3, [r7, #24]
 8000528:	009b      	lsls	r3, r3, #2
 800052a:	69fa      	ldr	r2, [r7, #28]
 800052c:	fa02 f303 	lsl.w	r3, r2, r3
 8000530:	697a      	ldr	r2, [r7, #20]
 8000532:	4313      	orrs	r3, r2
 8000534:	617b      	str	r3, [r7, #20]
                 /* Reset the corresponding ODR bit */
                if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	78db      	ldrb	r3, [r3, #3]
 800053a:	2b28      	cmp	r3, #40	; 0x28
 800053c:	d105      	bne.n	800054a <HAL_GPIO_Init+0x142>
                {
                  GPIOx->BRR = (((uint32_t)0x01) << (pinPos + (uint32_t)0x08));
 800053e:	69bb      	ldr	r3, [r7, #24]
 8000540:	3308      	adds	r3, #8
 8000542:	2201      	movs	r2, #1
 8000544:	409a      	lsls	r2, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	615a      	str	r2, [r3, #20]
                }
                /* Set the corresponding ODR bit */
                if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	78db      	ldrb	r3, [r3, #3]
 800054e:	2b48      	cmp	r3, #72	; 0x48
 8000550:	d105      	bne.n	800055e <HAL_GPIO_Init+0x156>
                {
                  GPIOx->BSRR = (((uint32_t)0x01) << (pinPos + (uint32_t)0x08));
 8000552:	69bb      	ldr	r3, [r7, #24]
 8000554:	3308      	adds	r3, #8
 8000556:	2201      	movs	r2, #1
 8000558:	409a      	lsls	r2, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	611a      	str	r2, [r3, #16]
        for(pinPos=0; pinPos <0x08; pinPos++)
 800055e:	69bb      	ldr	r3, [r7, #24]
 8000560:	3301      	adds	r3, #1
 8000562:	61bb      	str	r3, [r7, #24]
 8000564:	69bb      	ldr	r3, [r7, #24]
 8000566:	2b07      	cmp	r3, #7
 8000568:	d9c3      	bls.n	80004f2 <HAL_GPIO_Init+0xea>
                }
            }
        }

        GPIOx->CRH = tmpReg;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	697a      	ldr	r2, [r7, #20]
 800056e:	605a      	str	r2, [r3, #4]
    }


}
 8000570:	bf00      	nop
 8000572:	3724      	adds	r7, #36	; 0x24
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr

0800057a <HAL_GPIO_Write_Pin>:

void HAL_GPIO_Write_Pin(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin,BitAction PinState)
{
 800057a:	b480      	push	{r7}
 800057c:	b085      	sub	sp, #20
 800057e:	af00      	add	r7, sp, #0
 8000580:	60f8      	str	r0, [r7, #12]
 8000582:	60b9      	str	r1, [r7, #8]
 8000584:	4613      	mov	r3, r2
 8000586:	71fb      	strb	r3, [r7, #7]
    if(PinState == Bit_SET)
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d106      	bne.n	800059c <HAL_GPIO_Write_Pin+0x22>
    {
        /* set bit*/
        GPIOx->BSRR |= GPIO_Pin;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	691a      	ldr	r2, [r3, #16]
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	431a      	orrs	r2, r3
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	611a      	str	r2, [r3, #16]
    else
    {
       GPIOx->BRR = GPIO_Pin;
    }

}
 800059a:	e002      	b.n	80005a2 <HAL_GPIO_Write_Pin+0x28>
       GPIOx->BRR = GPIO_Pin;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	68ba      	ldr	r2, [r7, #8]
 80005a0:	615a      	str	r2, [r3, #20]
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr

080005ac <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  // assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80005b4:	4a05      	ldr	r2, [pc, #20]	; (80005cc <NVIC_PriorityGroupConfig+0x20>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c0:	60d3      	str	r3, [r2, #12]
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	e000ed00 	.word	0xe000ed00

080005d0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b087      	sub	sp, #28
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	230f      	movs	r3, #15
 80005e2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  // assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  // assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  // assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	78db      	ldrb	r3, [r3, #3]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d03a      	beq.n	8000662 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80005ec:	4b27      	ldr	r3, [pc, #156]	; (800068c <NVIC_Init+0xbc>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	43db      	mvns	r3, r3
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	f003 0307 	and.w	r3, r3, #7
 80005f8:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	f1c3 0304 	rsb	r3, r3, #4
 8000600:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000602:	68fa      	ldr	r2, [r7, #12]
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	fa22 f303 	lsr.w	r3, r2, r3
 800060a:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	785b      	ldrb	r3, [r3, #1]
 8000610:	461a      	mov	r2, r3
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	fa02 f303 	lsl.w	r3, r2, r3
 8000618:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	789b      	ldrb	r3, [r3, #2]
 800061e:	461a      	mov	r2, r3
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4013      	ands	r3, r2
 8000624:	697a      	ldr	r2, [r7, #20]
 8000626:	4313      	orrs	r3, r2
 8000628:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	011b      	lsls	r3, r3, #4
 800062e:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000630:	4a17      	ldr	r2, [pc, #92]	; (8000690 <NVIC_Init+0xc0>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	6979      	ldr	r1, [r7, #20]
 8000638:	b2c9      	uxtb	r1, r1
 800063a:	4413      	add	r3, r2
 800063c:	460a      	mov	r2, r1
 800063e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800064a:	4911      	ldr	r1, [pc, #68]	; (8000690 <NVIC_Init+0xc0>)
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	7812      	ldrb	r2, [r2, #0]
 8000650:	0952      	lsrs	r2, r2, #5
 8000652:	b2d2      	uxtb	r2, r2
 8000654:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000656:	2201      	movs	r2, #1
 8000658:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800065c:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000660:	e00f      	b.n	8000682 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800066a:	4909      	ldr	r1, [pc, #36]	; (8000690 <NVIC_Init+0xc0>)
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	7812      	ldrb	r2, [r2, #0]
 8000670:	0952      	lsrs	r2, r2, #5
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000676:	2201      	movs	r2, #1
 8000678:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800067a:	f100 0320 	add.w	r3, r0, #32
 800067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000682:	bf00      	nop
 8000684:	371c      	adds	r7, #28
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00
 8000690:	e000e100 	.word	0xe000e100

08000694 <queue_init>:

queue_struct_t s_queueList;

/* fuction initiallize a queue with no data*/
void queue_init(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
    s_queueList.getIndex = 0;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <queue_init+0x20>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
    s_queueList.putIndex = 0;
 800069e:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <queue_init+0x20>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	705a      	strb	r2, [r3, #1]
    s_queueList.size = 0;
 80006a4:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <queue_init+0x20>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	709a      	strb	r2, [r3, #2]
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	20000038 	.word	0x20000038

080006b8 <queue_isEmpty>:


/* Check if queue is empty or not */
bool queue_isEmpty()
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
    bool returnValue = false;
 80006be:	2300      	movs	r3, #0
 80006c0:	71fb      	strb	r3, [r7, #7]
    if(s_queueList.size == 0)
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <queue_isEmpty+0x24>)
 80006c4:	789b      	ldrb	r3, [r3, #2]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d101      	bne.n	80006ce <queue_isEmpty+0x16>
    {
        returnValue = true;
 80006ca:	2301      	movs	r3, #1
 80006cc:	71fb      	strb	r3, [r7, #7]
    }

    return returnValue;
 80006ce:	79fb      	ldrb	r3, [r7, #7]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	20000038 	.word	0x20000038

080006e0 <queue_isFull>:

/* Check if queue is full or not */
bool queue_isFull(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
    bool returnValue = false;
 80006e6:	2300      	movs	r3, #0
 80006e8:	71fb      	strb	r3, [r7, #7]
    if(s_queueList.size == MAX_QUEUE_SIZE)
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <queue_isFull+0x24>)
 80006ec:	789b      	ldrb	r3, [r3, #2]
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	d101      	bne.n	80006f6 <queue_isFull+0x16>
    {
        returnValue = true;
 80006f2:	2301      	movs	r3, #1
 80006f4:	71fb      	strb	r3, [r7, #7]
    }

    return returnValue;
 80006f6:	79fb      	ldrb	r3, [r7, #7]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	20000038 	.word	0x20000038

08000708 <queue_put_newLine>:

/*function increase index and size when put data to queue*/
bool queue_put_newLine(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
    bool val = true;
 800070e:	2301      	movs	r3, #1
 8000710:	71fb      	strb	r3, [r7, #7]
    if(queue_isFull() == false) /*if queue list not full*/
 8000712:	f7ff ffe5 	bl	80006e0 <queue_isFull>
 8000716:	4603      	mov	r3, r0
 8000718:	f083 0301 	eor.w	r3, r3, #1
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2b00      	cmp	r3, #0
 8000720:	d00f      	beq.n	8000742 <queue_put_newLine+0x3a>
    {
        s_queueList.putIndex++;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <queue_put_newLine+0x48>)
 8000724:	785b      	ldrb	r3, [r3, #1]
 8000726:	3301      	adds	r3, #1
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <queue_put_newLine+0x48>)
 800072c:	705a      	strb	r2, [r3, #1]
        s_queueList.size++;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <queue_put_newLine+0x48>)
 8000730:	789b      	ldrb	r3, [r3, #2]
 8000732:	3301      	adds	r3, #1
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <queue_put_newLine+0x48>)
 8000738:	709a      	strb	r2, [r3, #2]
        dataIndex=0;
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <queue_put_newLine+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	801a      	strh	r2, [r3, #0]
 8000740:	e001      	b.n	8000746 <queue_put_newLine+0x3e>
    }
    else
    {
        val = false;
 8000742:	2300      	movs	r3, #0
 8000744:	71fb      	strb	r3, [r7, #7]
    }

    return val;
 8000746:	79fb      	ldrb	r3, [r7, #7]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000038 	.word	0x20000038
 8000754:	20000034 	.word	0x20000034

08000758 <queue_get>:

/*function increase index and reduce size when get data from queue*/
bool queue_get(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
    bool val = true;
 800075e:	2301      	movs	r3, #1
 8000760:	71fb      	strb	r3, [r7, #7]
    if(queue_isEmpty() == false) /*if queue list not empty*/
 8000762:	f7ff ffa9 	bl	80006b8 <queue_isEmpty>
 8000766:	4603      	mov	r3, r0
 8000768:	f083 0301 	eor.w	r3, r3, #1
 800076c:	b2db      	uxtb	r3, r3
 800076e:	2b00      	cmp	r3, #0
 8000770:	d00c      	beq.n	800078c <queue_get+0x34>
    {
        s_queueList.getIndex++;
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <queue_get+0x44>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	3301      	adds	r3, #1
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <queue_get+0x44>)
 800077c:	701a      	strb	r2, [r3, #0]
        s_queueList.size--;
 800077e:	4b07      	ldr	r3, [pc, #28]	; (800079c <queue_get+0x44>)
 8000780:	789b      	ldrb	r3, [r3, #2]
 8000782:	3b01      	subs	r3, #1
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <queue_get+0x44>)
 8000788:	709a      	strb	r2, [r3, #2]
 800078a:	e001      	b.n	8000790 <queue_get+0x38>
    }
    else
    {
        val = false;
 800078c:	2300      	movs	r3, #0
 800078e:	71fb      	strb	r3, [r7, #7]
    }

    return val;
 8000790:	79fb      	ldrb	r3, [r7, #7]
}
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000038 	.word	0x20000038

080007a0 <queue_push_data>:


/* function push data to each line */ 
void queue_push_data(uint8_t data)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
    uint8_t putIndex = 0xFF;
 80007aa:	23ff      	movs	r3, #255	; 0xff
 80007ac:	73fb      	strb	r3, [r7, #15]
    putIndex = s_queueList.putIndex % MAX_QUEUE_SIZE;
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <queue_push_data+0x4c>)
 80007b0:	785b      	ldrb	r3, [r3, #1]
 80007b2:	f003 0303 	and.w	r3, r3, #3
 80007b6:	73fb      	strb	r3, [r7, #15]
    s_queueList.queue_data[putIndex][dataIndex] = data;
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	4a0d      	ldr	r2, [pc, #52]	; (80007f0 <queue_push_data+0x50>)
 80007bc:	8812      	ldrh	r2, [r2, #0]
 80007be:	4610      	mov	r0, r2
 80007c0:	4a0a      	ldr	r2, [pc, #40]	; (80007ec <queue_push_data+0x4c>)
 80007c2:	f44f 7103 	mov.w	r1, #524	; 0x20c
 80007c6:	fb01 f303 	mul.w	r3, r1, r3
 80007ca:	4413      	add	r3, r2
 80007cc:	4403      	add	r3, r0
 80007ce:	3303      	adds	r3, #3
 80007d0:	79fa      	ldrb	r2, [r7, #7]
 80007d2:	701a      	strb	r2, [r3, #0]
    dataIndex++;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <queue_push_data+0x50>)
 80007d6:	881b      	ldrh	r3, [r3, #0]
 80007d8:	3301      	adds	r3, #1
 80007da:	b29a      	uxth	r2, r3
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <queue_push_data+0x50>)
 80007de:	801a      	strh	r2, [r3, #0]
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	20000038 	.word	0x20000038
 80007f0:	20000034 	.word	0x20000034

080007f4 <queue_pop>:

/* fuction pop data line in order to parse data */
uint8_t* queue_pop(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
    uint8_t *ptrReturn;
    uint8_t getIndex = 0xFF;
 80007fa:	23ff      	movs	r3, #255	; 0xff
 80007fc:	71fb      	strb	r3, [r7, #7]
    getIndex = s_queueList.getIndex % MAX_QUEUE_SIZE;
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <queue_pop+0x34>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	f003 0303 	and.w	r3, r3, #3
 8000806:	71fb      	strb	r3, [r7, #7]
    ptrReturn = s_queueList.queue_data[getIndex];
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800080e:	fb02 f303 	mul.w	r3, r2, r3
 8000812:	4a05      	ldr	r2, [pc, #20]	; (8000828 <queue_pop+0x34>)
 8000814:	4413      	add	r3, r2
 8000816:	3303      	adds	r3, #3
 8000818:	603b      	str	r3, [r7, #0]

    return ptrReturn;
 800081a:	683b      	ldr	r3, [r7, #0]
}
 800081c:	4618      	mov	r0, r3
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	20000038 	.word	0x20000038

0800082c <FLASH_UnlockBank1>:
  *           equivalent to FLASH_Unlock function.
  * @param  None
  * @retval None
  */
void FLASH_UnlockBank1(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <FLASH_UnlockBank1+0x18>)
 8000832:	4a05      	ldr	r2, [pc, #20]	; (8000848 <FLASH_UnlockBank1+0x1c>)
 8000834:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8000836:	4b03      	ldr	r3, [pc, #12]	; (8000844 <FLASH_UnlockBank1+0x18>)
 8000838:	4a04      	ldr	r2, [pc, #16]	; (800084c <FLASH_UnlockBank1+0x20>)
 800083a:	605a      	str	r2, [r3, #4]
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	40022000 	.word	0x40022000
 8000848:	45670123 	.word	0x45670123
 800084c:	cdef89ab 	.word	0xcdef89ab

08000850 <FLASH_ClearFlag>:
  *     @arg FLASH_FLAG_WRPRTERR: FLASH Write protected error flag      
  *     @arg FLASH_FLAG_EOP: FLASH End of Operation flag           
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
#else
  /* Check the parameters */
  // assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8000858:	4a03      	ldr	r2, [pc, #12]	; (8000868 <FLASH_ClearFlag+0x18>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	60d3      	str	r3, [r2, #12]
#endif /* STM32F10X_XL */
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	40022000 	.word	0x40022000

0800086c <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800086c:	b480      	push	{r7}
 800086e:	b087      	sub	sp, #28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000884:	4b4f      	ldr	r3, [pc, #316]	; (80009c4 <RCC_GetClocksFreq+0x158>)
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	f003 030c 	and.w	r3, r3, #12
 800088c:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	2b08      	cmp	r3, #8
 8000892:	d011      	beq.n	80008b8 <RCC_GetClocksFreq+0x4c>
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	2b08      	cmp	r3, #8
 8000898:	d83a      	bhi.n	8000910 <RCC_GetClocksFreq+0xa4>
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d003      	beq.n	80008a8 <RCC_GetClocksFreq+0x3c>
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	2b04      	cmp	r3, #4
 80008a4:	d004      	beq.n	80008b0 <RCC_GetClocksFreq+0x44>
 80008a6:	e033      	b.n	8000910 <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a47      	ldr	r2, [pc, #284]	; (80009c8 <RCC_GetClocksFreq+0x15c>)
 80008ac:	601a      	str	r2, [r3, #0]
      break;
 80008ae:	e033      	b.n	8000918 <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a45      	ldr	r2, [pc, #276]	; (80009c8 <RCC_GetClocksFreq+0x15c>)
 80008b4:	601a      	str	r2, [r3, #0]
      break;
 80008b6:	e02f      	b.n	8000918 <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80008b8:	4b42      	ldr	r3, [pc, #264]	; (80009c4 <RCC_GetClocksFreq+0x158>)
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80008c0:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80008c2:	4b40      	ldr	r3, [pc, #256]	; (80009c4 <RCC_GetClocksFreq+0x158>)
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008ca:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	0c9b      	lsrs	r3, r3, #18
 80008d0:	3302      	adds	r3, #2
 80008d2:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d106      	bne.n	80008e8 <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	4a3b      	ldr	r2, [pc, #236]	; (80009cc <RCC_GetClocksFreq+0x160>)
 80008de:	fb03 f202 	mul.w	r2, r3, r2
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80008e6:	e017      	b.n	8000918 <RCC_GetClocksFreq+0xac>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80008e8:	4b36      	ldr	r3, [pc, #216]	; (80009c4 <RCC_GetClocksFreq+0x158>)
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d006      	beq.n	8000902 <RCC_GetClocksFreq+0x96>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80008f4:	693b      	ldr	r3, [r7, #16]
 80008f6:	4a35      	ldr	r2, [pc, #212]	; (80009cc <RCC_GetClocksFreq+0x160>)
 80008f8:	fb03 f202 	mul.w	r2, r3, r2
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	601a      	str	r2, [r3, #0]
      break;
 8000900:	e00a      	b.n	8000918 <RCC_GetClocksFreq+0xac>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	4a30      	ldr	r2, [pc, #192]	; (80009c8 <RCC_GetClocksFreq+0x15c>)
 8000906:	fb03 f202 	mul.w	r2, r3, r2
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	601a      	str	r2, [r3, #0]
      break;
 800090e:	e003      	b.n	8000918 <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4a2d      	ldr	r2, [pc, #180]	; (80009c8 <RCC_GetClocksFreq+0x15c>)
 8000914:	601a      	str	r2, [r3, #0]
      break;
 8000916:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000918:	4b2a      	ldr	r3, [pc, #168]	; (80009c4 <RCC_GetClocksFreq+0x158>)
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000920:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	091b      	lsrs	r3, r3, #4
 8000926:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000928:	4a29      	ldr	r2, [pc, #164]	; (80009d0 <RCC_GetClocksFreq+0x164>)
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	4413      	add	r3, r2
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	40da      	lsrs	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000940:	4b20      	ldr	r3, [pc, #128]	; (80009c4 <RCC_GetClocksFreq+0x158>)
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000948:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	0a1b      	lsrs	r3, r3, #8
 800094e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000950:	4a1f      	ldr	r2, [pc, #124]	; (80009d0 <RCC_GetClocksFreq+0x164>)
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	4413      	add	r3, r2
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	685a      	ldr	r2, [r3, #4]
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	40da      	lsrs	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000968:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <RCC_GetClocksFreq+0x158>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000970:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	0adb      	lsrs	r3, r3, #11
 8000976:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000978:	4a15      	ldr	r2, [pc, #84]	; (80009d0 <RCC_GetClocksFreq+0x164>)
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	4413      	add	r3, r2
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	b2db      	uxtb	r3, r3
 8000982:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	685a      	ldr	r2, [r3, #4]
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	40da      	lsrs	r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <RCC_GetClocksFreq+0x158>)
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000998:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	0b9b      	lsrs	r3, r3, #14
 800099e:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80009a0:	4a0c      	ldr	r2, [pc, #48]	; (80009d4 <RCC_GetClocksFreq+0x168>)
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	4413      	add	r3, r2
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68da      	ldr	r2, [r3, #12]
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	611a      	str	r2, [r3, #16]
}
 80009ba:	bf00      	nop
 80009bc:	371c      	adds	r7, #28
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	40021000 	.word	0x40021000
 80009c8:	007a1200 	.word	0x007a1200
 80009cc:	003d0900 	.word	0x003d0900
 80009d0:	20000000 	.word	0x20000000
 80009d4:	20000010 	.word	0x20000010

080009d8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	460b      	mov	r3, r1
 80009e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  if (NewState != DISABLE)
 80009e4:	78fb      	ldrb	r3, [r7, #3]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d006      	beq.n	80009f8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <RCC_APB2PeriphClockCmd+0x38>)
 80009ec:	699a      	ldr	r2, [r3, #24]
 80009ee:	4908      	ldr	r1, [pc, #32]	; (8000a10 <RCC_APB2PeriphClockCmd+0x38>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80009f6:	e006      	b.n	8000a06 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <RCC_APB2PeriphClockCmd+0x38>)
 80009fa:	699a      	ldr	r2, [r3, #24]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	43db      	mvns	r3, r3
 8000a00:	4903      	ldr	r1, [pc, #12]	; (8000a10 <RCC_APB2PeriphClockCmd+0x38>)
 8000a02:	4013      	ands	r3, r2
 8000a04:	618b      	str	r3, [r1, #24]
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	40021000 	.word	0x40021000

08000a14 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	; 0x30
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    // assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	8a1b      	ldrh	r3, [r3, #16]
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8000a3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a40:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8000a44:	4013      	ands	r3, r2
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	88db      	ldrh	r3, [r3, #6]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a50:	4313      	orrs	r3, r2
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	899b      	ldrh	r3, [r3, #12]
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a66:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	889a      	ldrh	r2, [r3, #4]
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	891b      	ldrh	r3, [r3, #8]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	461a      	mov	r2, r3
 8000a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a86:	4313      	orrs	r3, r2
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	8a9b      	ldrh	r3, [r3, #20]
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8000a9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a9c:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	899b      	ldrh	r3, [r3, #12]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aac:	4313      	orrs	r3, r2
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000ab8:	f107 0308 	add.w	r3, r7, #8
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fed5 	bl	800086c <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	4a2e      	ldr	r2, [pc, #184]	; (8000b80 <USART_Init+0x16c>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d102      	bne.n	8000ad0 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ace:	e001      	b.n	8000ad4 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	899b      	ldrh	r3, [r3, #12]
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	b21b      	sxth	r3, r3
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	da0c      	bge.n	8000afa <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	4413      	add	r3, r2
 8000ae8:	009a      	lsls	r2, r3, #2
 8000aea:	441a      	add	r2, r3
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
 8000af8:	e00b      	b.n	8000b12 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000afa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000afc:	4613      	mov	r3, r2
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	4413      	add	r3, r2
 8000b02:	009a      	lsls	r2, r3, #2
 8000b04:	441a      	add	r2, r3
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	4a1b      	ldr	r2, [pc, #108]	; (8000b84 <USART_Init+0x170>)
 8000b16:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1a:	095b      	lsrs	r3, r3, #5
 8000b1c:	011b      	lsls	r3, r3, #4
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b22:	091b      	lsrs	r3, r3, #4
 8000b24:	2264      	movs	r2, #100	; 0x64
 8000b26:	fb02 f303 	mul.w	r3, r2, r3
 8000b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	899b      	ldrh	r3, [r3, #12]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	b21b      	sxth	r3, r3
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	da0c      	bge.n	8000b56 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000b3c:	6a3b      	ldr	r3, [r7, #32]
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	3332      	adds	r3, #50	; 0x32
 8000b42:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <USART_Init+0x170>)
 8000b44:	fba2 2303 	umull	r2, r3, r2, r3
 8000b48:	095b      	lsrs	r3, r3, #5
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b50:	4313      	orrs	r3, r2
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b54:	e00b      	b.n	8000b6e <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000b56:	6a3b      	ldr	r3, [r7, #32]
 8000b58:	011b      	lsls	r3, r3, #4
 8000b5a:	3332      	adds	r3, #50	; 0x32
 8000b5c:	4a09      	ldr	r2, [pc, #36]	; (8000b84 <USART_Init+0x170>)
 8000b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b62:	095b      	lsrs	r3, r3, #5
 8000b64:	f003 030f 	and.w	r3, r3, #15
 8000b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	811a      	strh	r2, [r3, #8]
}
 8000b76:	bf00      	nop
 8000b78:	3730      	adds	r7, #48	; 0x30
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40013800 	.word	0x40013800
 8000b84:	51eb851f 	.word	0x51eb851f

08000b88 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  // assert_param(IS_USART_ALL_PERIPH(USARTx));
  // assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000b94:	78fb      	ldrb	r3, [r7, #3]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d008      	beq.n	8000bac <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	899b      	ldrh	r3, [r3, #12]
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8000baa:	e007      	b.n	8000bbc <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	899b      	ldrh	r3, [r3, #12]
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	819a      	strh	r2, [r3, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr

08000bc6 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b087      	sub	sp, #28
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	460b      	mov	r3, r1
 8000bd0:	807b      	strh	r3, [r7, #2]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    // assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000bea:	887b      	ldrh	r3, [r7, #2]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8000bf4:	887b      	ldrh	r3, [r7, #2]
 8000bf6:	f003 031f 	and.w	r3, r3, #31
 8000bfa:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d103      	bne.n	8000c14 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	330c      	adds	r3, #12
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	e009      	b.n	8000c28 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d103      	bne.n	8000c22 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3310      	adds	r3, #16
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	e002      	b.n	8000c28 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	3314      	adds	r3, #20
 8000c26:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000c28:	787b      	ldrb	r3, [r7, #1]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d006      	beq.n	8000c3c <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	6819      	ldr	r1, [r3, #0]
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	68ba      	ldr	r2, [r7, #8]
 8000c36:	430a      	orrs	r2, r1
 8000c38:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000c3a:	e006      	b.n	8000c4a <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	6819      	ldr	r1, [r3, #0]
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	43da      	mvns	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	400a      	ands	r2, r1
 8000c48:	601a      	str	r2, [r3, #0]
}
 8000c4a:	bf00      	nop
 8000c4c:	371c      	adds	r7, #28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  // assert_param(IS_USART_ALL_PERIPH(USARTx));
  // assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000c60:	887b      	ldrh	r3, [r7, #2]
 8000c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	809a      	strh	r2, [r3, #4]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr

08000c76 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  // assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	889b      	ldrh	r3, [r3, #4]
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c88:	b29b      	uxth	r3, r3
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    // assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	881b      	ldrh	r3, [r3, #0]
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	887b      	ldrh	r3, [r7, #2]
 8000cac:	4013      	ands	r3, r2
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d002      	beq.n	8000cba <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	73fb      	strb	r3, [r7, #15]
 8000cb8:	e001      	b.n	8000cbe <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
	...

08000ccc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000cd0:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <SystemInit+0x5c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <SystemInit+0x5c>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <SystemInit+0x5c>)
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	4911      	ldr	r1, [pc, #68]	; (8000d28 <SystemInit+0x5c>)
 8000ce2:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <SystemInit+0x60>)
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <SystemInit+0x5c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <SystemInit+0x5c>)
 8000cee:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cf6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <SystemInit+0x5c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <SystemInit+0x5c>)
 8000cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d02:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <SystemInit+0x5c>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <SystemInit+0x5c>)
 8000d0a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000d0e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <SystemInit+0x5c>)
 8000d12:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000d16:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000d18:	f000 f80c 	bl	8000d34 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <SystemInit+0x64>)
 8000d1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d22:	609a      	str	r2, [r3, #8]
#endif 
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	f8ff0000 	.word	0xf8ff0000
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000d38:	f000 f802 	bl	8000d40 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000d4e:	4b3a      	ldr	r3, [pc, #232]	; (8000e38 <SetSysClockTo72+0xf8>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a39      	ldr	r2, [pc, #228]	; (8000e38 <SetSysClockTo72+0xf8>)
 8000d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d58:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000d5a:	4b37      	ldr	r3, [pc, #220]	; (8000e38 <SetSysClockTo72+0xf8>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d62:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3301      	adds	r3, #1
 8000d68:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d103      	bne.n	8000d78 <SetSysClockTo72+0x38>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000d76:	d1f0      	bne.n	8000d5a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000d78:	4b2f      	ldr	r3, [pc, #188]	; (8000e38 <SetSysClockTo72+0xf8>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d002      	beq.n	8000d8a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000d84:	2301      	movs	r3, #1
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	e001      	b.n	8000d8e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d14b      	bne.n	8000e2c <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000d94:	4b29      	ldr	r3, [pc, #164]	; (8000e3c <SetSysClockTo72+0xfc>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a28      	ldr	r2, [pc, #160]	; (8000e3c <SetSysClockTo72+0xfc>)
 8000d9a:	f043 0310 	orr.w	r3, r3, #16
 8000d9e:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000da0:	4b26      	ldr	r3, [pc, #152]	; (8000e3c <SetSysClockTo72+0xfc>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a25      	ldr	r2, [pc, #148]	; (8000e3c <SetSysClockTo72+0xfc>)
 8000da6:	f023 0303 	bic.w	r3, r3, #3
 8000daa:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000dac:	4b23      	ldr	r3, [pc, #140]	; (8000e3c <SetSysClockTo72+0xfc>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a22      	ldr	r2, [pc, #136]	; (8000e3c <SetSysClockTo72+0xfc>)
 8000db2:	f043 0302 	orr.w	r3, r3, #2
 8000db6:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000db8:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <SetSysClockTo72+0xf8>)
 8000dba:	4a1f      	ldr	r2, [pc, #124]	; (8000e38 <SetSysClockTo72+0xf8>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000dc0:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <SetSysClockTo72+0xf8>)
 8000dc2:	4a1d      	ldr	r2, [pc, #116]	; (8000e38 <SetSysClockTo72+0xf8>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <SetSysClockTo72+0xf8>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	4a1a      	ldr	r2, [pc, #104]	; (8000e38 <SetSysClockTo72+0xf8>)
 8000dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dd2:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000dd4:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <SetSysClockTo72+0xf8>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	4a17      	ldr	r2, [pc, #92]	; (8000e38 <SetSysClockTo72+0xf8>)
 8000dda:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000dde:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <SetSysClockTo72+0xf8>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <SetSysClockTo72+0xf8>)
 8000de6:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000dea:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <SetSysClockTo72+0xf8>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a11      	ldr	r2, [pc, #68]	; (8000e38 <SetSysClockTo72+0xf8>)
 8000df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000df6:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000df8:	bf00      	nop
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <SetSysClockTo72+0xf8>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0f9      	beq.n	8000dfa <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <SetSysClockTo72+0xf8>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <SetSysClockTo72+0xf8>)
 8000e0c:	f023 0303 	bic.w	r3, r3, #3
 8000e10:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <SetSysClockTo72+0xf8>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <SetSysClockTo72+0xf8>)
 8000e18:	f043 0302 	orr.w	r3, r3, #2
 8000e1c:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000e1e:	bf00      	nop
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <SetSysClockTo72+0xf8>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 030c 	and.w	r3, r3, #12
 8000e28:	2b08      	cmp	r3, #8
 8000e2a:	d1f9      	bne.n	8000e20 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40022000 	.word	0x40022000

08000e40 <parseDataFrame>:



/* fuction parse each srec line */
parse_status_t parseDataFrame(uint8_t pInput[],parse_data_line_struct_t *Output)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b087      	sub	sp, #28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
    ID_Byte Id_Byte =  pInput[1];
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	785b      	ldrb	r3, [r3, #1]
 8000e4e:	74fb      	strb	r3, [r7, #19]
    uint32_t DataLength = pInput[2];
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3302      	adds	r3, #2
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	60fb      	str	r3, [r7, #12]
    uint32_t dataIndex=0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
    Output->Id_Byte = 0;
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
    Output->dataLength = 0;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	2200      	movs	r2, #0
 8000e66:	729a      	strb	r2, [r3, #10]
    status = e_parseStatus_inprogress;
 8000e68:	4b50      	ldr	r3, [pc, #320]	; (8000fac <parseDataFrame+0x16c>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	701a      	strb	r2, [r3, #0]
    /* check invalid srec record */
    if(pInput[0]!= 0x02)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d001      	beq.n	8000e7a <parseDataFrame+0x3a>
    {
        return e_parseStatus_error;
 8000e76:	2302      	movs	r3, #2
 8000e78:	e093      	b.n	8000fa2 <parseDataFrame+0x162>
    }

    switch (Id_Byte)
 8000e7a:	7cfb      	ldrb	r3, [r7, #19]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d85e      	bhi.n	8000f40 <parseDataFrame+0x100>
 8000e82:	a201      	add	r2, pc, #4	; (adr r2, 8000e88 <parseDataFrame+0x48>)
 8000e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e88:	08000e99 	.word	0x08000e99
 8000e8c:	08000ec3 	.word	0x08000ec3
 8000e90:	08000eed 	.word	0x08000eed
 8000e94:	08000f17 	.word	0x08000f17
    {
        case ID_RECEIVED_SELECT_ON_OFF_MODE:
            if(DataLength == 0x01)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d106      	bne.n	8000eac <parseDataFrame+0x6c>
            {
                Output->Id_Byte = ID_RECEIVED_SELECT_ON_OFF_MODE;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]
                Output->dataLength = 1;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	729a      	strb	r2, [r3, #10]
            {
                Output->Id_Byte = ID_RECEIVED_SELECT_ON_OFF_MODE;
                Output->dataLength = DataLength;
                status = e_parseStatus_error;
            }
            break;
 8000eaa:	e04d      	b.n	8000f48 <parseDataFrame+0x108>
                Output->Id_Byte = ID_RECEIVED_SELECT_ON_OFF_MODE;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]
                Output->dataLength = DataLength;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	729a      	strb	r2, [r3, #10]
                status = e_parseStatus_error;
 8000eba:	4b3c      	ldr	r3, [pc, #240]	; (8000fac <parseDataFrame+0x16c>)
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	701a      	strb	r2, [r3, #0]
            break;
 8000ec0:	e042      	b.n	8000f48 <parseDataFrame+0x108>
        case ID_RECEIVED_SELECT_AUTO_MANUAL_MODE:
            if(DataLength == 0x01)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d106      	bne.n	8000ed6 <parseDataFrame+0x96>
            {
                Output->Id_Byte = ID_RECEIVED_SELECT_AUTO_MANUAL_MODE;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	2202      	movs	r2, #2
 8000ecc:	601a      	str	r2, [r3, #0]
                Output->dataLength = 1;
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	729a      	strb	r2, [r3, #10]
            {
                Output->Id_Byte = ID_RECEIVED_SELECT_AUTO_MANUAL_MODE;
                Output->dataLength = DataLength;
                status = e_parseStatus_error;
            }
            break;
 8000ed4:	e038      	b.n	8000f48 <parseDataFrame+0x108>
                Output->Id_Byte = ID_RECEIVED_SELECT_AUTO_MANUAL_MODE;
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	2202      	movs	r2, #2
 8000eda:	601a      	str	r2, [r3, #0]
                Output->dataLength = DataLength;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	729a      	strb	r2, [r3, #10]
                status = e_parseStatus_error;
 8000ee4:	4b31      	ldr	r3, [pc, #196]	; (8000fac <parseDataFrame+0x16c>)
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	701a      	strb	r2, [r3, #0]
            break;
 8000eea:	e02d      	b.n	8000f48 <parseDataFrame+0x108>
        case ID_RECEIVED_SELECT_WIND_LEVEL_MODE:
            if(DataLength == 0x01)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d106      	bne.n	8000f00 <parseDataFrame+0xc0>
            {
                Output->Id_Byte = ID_RECEIVED_SELECT_WIND_LEVEL_MODE;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	601a      	str	r2, [r3, #0]
                Output->dataLength = 1;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	2201      	movs	r2, #1
 8000efc:	729a      	strb	r2, [r3, #10]
            {
                Output->Id_Byte = ID_RECEIVED_SELECT_WIND_LEVEL_MODE;
                Output->dataLength = DataLength;
                status = e_parseStatus_error;
            }
            break;
 8000efe:	e023      	b.n	8000f48 <parseDataFrame+0x108>
                Output->Id_Byte = ID_RECEIVED_SELECT_WIND_LEVEL_MODE;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	2203      	movs	r2, #3
 8000f04:	601a      	str	r2, [r3, #0]
                Output->dataLength = DataLength;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	729a      	strb	r2, [r3, #10]
                status = e_parseStatus_error;
 8000f0e:	4b27      	ldr	r3, [pc, #156]	; (8000fac <parseDataFrame+0x16c>)
 8000f10:	2202      	movs	r2, #2
 8000f12:	701a      	strb	r2, [r3, #0]
            break;
 8000f14:	e018      	b.n	8000f48 <parseDataFrame+0x108>
        case ID_RECEIVED_SELECT_READ_ALL_STATUS_MODE:
            if(DataLength == 0x00)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d106      	bne.n	8000f2a <parseDataFrame+0xea>
            {
                Output->Id_Byte = ID_RECEIVED_SELECT_READ_ALL_STATUS_MODE;
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	2204      	movs	r2, #4
 8000f20:	601a      	str	r2, [r3, #0]
                Output->dataLength = 0;
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	2200      	movs	r2, #0
 8000f26:	729a      	strb	r2, [r3, #10]
            {
                Output->Id_Byte = ID_RECEIVED_SELECT_READ_ALL_STATUS_MODE;
                Output->dataLength = DataLength;
                status = e_parseStatus_error;
            }
            break;
 8000f28:	e00e      	b.n	8000f48 <parseDataFrame+0x108>
                Output->Id_Byte = ID_RECEIVED_SELECT_READ_ALL_STATUS_MODE;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	601a      	str	r2, [r3, #0]
                Output->dataLength = DataLength;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	729a      	strb	r2, [r3, #10]
                status = e_parseStatus_error;
 8000f38:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <parseDataFrame+0x16c>)
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	701a      	strb	r2, [r3, #0]
            break;
 8000f3e:	e003      	b.n	8000f48 <parseDataFrame+0x108>
        default:
            status = e_parseStatus_error;
 8000f40:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <parseDataFrame+0x16c>)
 8000f42:	2202      	movs	r2, #2
 8000f44:	701a      	strb	r2, [r3, #0]
            break;
 8000f46:	bf00      	nop
    }

    if(e_parseStatus_error != status)
 8000f48:	4b18      	ldr	r3, [pc, #96]	; (8000fac <parseDataFrame+0x16c>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d026      	beq.n	8000f9e <parseDataFrame+0x15e>
    {
        /* handle to get data and check end of frame*/
        for (dataIndex = 0; dataIndex < Output->dataLength ; dataIndex++)
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	e00d      	b.n	8000f72 <parseDataFrame+0x132>
        {
            Output->data[dataIndex] = pInput[dataIndex+3];
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	3303      	adds	r3, #3
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	7819      	ldrb	r1, [r3, #0]
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	4413      	add	r3, r2
 8000f66:	3304      	adds	r3, #4
 8000f68:	460a      	mov	r2, r1
 8000f6a:	701a      	strb	r2, [r3, #0]
        for (dataIndex = 0; dataIndex < Output->dataLength ; dataIndex++)
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	7a9b      	ldrb	r3, [r3, #10]
 8000f76:	461a      	mov	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d3eb      	bcc.n	8000f56 <parseDataFrame+0x116>
        }
        /* check end of frame  = 0x03*/
        if(0x03 == pInput[3+Output->dataLength])
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	7a9b      	ldrb	r3, [r3, #10]
 8000f82:	3303      	adds	r3, #3
 8000f84:	461a      	mov	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b03      	cmp	r3, #3
 8000f8e:	d103      	bne.n	8000f98 <parseDataFrame+0x158>
        {
            status = e_parseStatus_inprogress;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <parseDataFrame+0x16c>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
 8000f96:	e002      	b.n	8000f9e <parseDataFrame+0x15e>
        }
        else
        {
            status = e_parseStatus_error;
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <parseDataFrame+0x16c>)
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	701a      	strb	r2, [r3, #0]
        }

    }

    return status;
 8000f9e:	4b03      	ldr	r3, [pc, #12]	; (8000fac <parseDataFrame+0x16c>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	371c      	adds	r7, #28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	20000014 	.word	0x20000014

08000fb0 <handleDataFrame>:


parse_status_t handleDataFrame(uint8_t pInput[],parse_data_line_struct_t *OutPutDataFeedBack,fp_gpio_callBackFuction GPIO_callBackFuction)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
    parse_data_line_struct_t Output;
    parse_status_t parseStatus = parseDataFrame(pInput,&Output);
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f7ff ff3c 	bl	8000e40 <parseDataFrame>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	77fb      	strb	r3, [r7, #31]
    switch (Output.Id_Byte)
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	f200 8084 	bhi.w	80010de <handleDataFrame+0x12e>
 8000fd6:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <handleDataFrame+0x2c>)
 8000fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fdc:	08000fed 	.word	0x08000fed
 8000fe0:	0800103f 	.word	0x0800103f
 8000fe4:	08001075 	.word	0x08001075
 8000fe8:	080010b1 	.word	0x080010b1
    {
        case ID_RECEIVED_SELECT_ON_OFF_MODE:
        /* setup frame feed back*/
            OutPutDataFeedBack->Id_Byte = ID_FEEDBACK_SELECT_ON_OFF_MODE;
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	2281      	movs	r2, #129	; 0x81
 8000ff0:	601a      	str	r2, [r3, #0]
            OutPutDataFeedBack->dataLength = 0x01;
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	729a      	strb	r2, [r3, #10]
            if(e_parseStatus_error != parseStatus)
 8000ff8:	7ffb      	ldrb	r3, [r7, #31]
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d01b      	beq.n	8001036 <handleDataFrame+0x86>
            {
                /* check data = 0 or =1*/
                if((0x00 == Output.data[0]) || (0x01 == Output.data[0]))
 8000ffe:	7d3b      	ldrb	r3, [r7, #20]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d002      	beq.n	800100a <handleDataFrame+0x5a>
 8001004:	7d3b      	ldrb	r3, [r7, #20]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d111      	bne.n	800102e <handleDataFrame+0x7e>
                {
                    /* control fan*/
                    switch (Output.data[0])
 800100a:	7d3b      	ldrb	r3, [r7, #20]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d002      	beq.n	8001016 <handleDataFrame+0x66>
 8001010:	2b01      	cmp	r3, #1
 8001012:	d004      	beq.n	800101e <handleDataFrame+0x6e>
                     case 0x01:
                        /* code */
                        GPIO_callBackFuction(true);
                        break;
                    default:
                        break;
 8001014:	e007      	b.n	8001026 <handleDataFrame+0x76>
                        GPIO_callBackFuction(false);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2000      	movs	r0, #0
 800101a:	4798      	blx	r3
                        break;
 800101c:	e003      	b.n	8001026 <handleDataFrame+0x76>
                        GPIO_callBackFuction(true);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2001      	movs	r0, #1
 8001022:	4798      	blx	r3
                        break;
 8001024:	bf00      	nop
                    }

                    OutPutDataFeedBack->data[0] = 0x00;
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	2200      	movs	r2, #0
 800102a:	711a      	strb	r2, [r3, #4]
            else
            {
                /* setup frame feed back*/
                OutPutDataFeedBack->data[0] = 0xFF;
            }
            break;
 800102c:	e05c      	b.n	80010e8 <handleDataFrame+0x138>
                    OutPutDataFeedBack->data[0] = 0x01;
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2201      	movs	r2, #1
 8001032:	711a      	strb	r2, [r3, #4]
            break;
 8001034:	e058      	b.n	80010e8 <handleDataFrame+0x138>
                OutPutDataFeedBack->data[0] = 0xFF;
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	22ff      	movs	r2, #255	; 0xff
 800103a:	711a      	strb	r2, [r3, #4]
            break;
 800103c:	e054      	b.n	80010e8 <handleDataFrame+0x138>
        case ID_RECEIVED_SELECT_AUTO_MANUAL_MODE:
            /* setup frame feed back*/
            OutPutDataFeedBack->Id_Byte = ID_FEEDBACK_SELECT_AUTO_MANUAL_MODE;
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	2282      	movs	r2, #130	; 0x82
 8001042:	601a      	str	r2, [r3, #0]
            OutPutDataFeedBack->dataLength = 0x01;
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	2201      	movs	r2, #1
 8001048:	729a      	strb	r2, [r3, #10]
            if(e_parseStatus_error != parseStatus)
 800104a:	7ffb      	ldrb	r3, [r7, #31]
 800104c:	2b02      	cmp	r3, #2
 800104e:	d00d      	beq.n	800106c <handleDataFrame+0xbc>
            {
                /* check data = 0 or =1*/
                if((0x00 == Output.data[0]) || (0x01 == Output.data[0]))
 8001050:	7d3b      	ldrb	r3, [r7, #20]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d002      	beq.n	800105c <handleDataFrame+0xac>
 8001056:	7d3b      	ldrb	r3, [r7, #20]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d103      	bne.n	8001064 <handleDataFrame+0xb4>
                {
                    /* control fan mode*/


                    OutPutDataFeedBack->data[0] = 0x00;
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	2200      	movs	r2, #0
 8001060:	711a      	strb	r2, [r3, #4]
            }
            else
            {
                OutPutDataFeedBack->data[0] = 0xFF;
            }
            break;
 8001062:	e041      	b.n	80010e8 <handleDataFrame+0x138>
                    OutPutDataFeedBack->data[0] = 0x01;
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	2201      	movs	r2, #1
 8001068:	711a      	strb	r2, [r3, #4]
            break;
 800106a:	e03d      	b.n	80010e8 <handleDataFrame+0x138>
                OutPutDataFeedBack->data[0] = 0xFF;
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	22ff      	movs	r2, #255	; 0xff
 8001070:	711a      	strb	r2, [r3, #4]
            break;
 8001072:	e039      	b.n	80010e8 <handleDataFrame+0x138>

        case ID_RECEIVED_SELECT_WIND_LEVEL_MODE:
            /* setup frame feed back*/
            OutPutDataFeedBack->Id_Byte = ID_FEEDBACK_SELECT_WIND_LEVEL_MODE;
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	2283      	movs	r2, #131	; 0x83
 8001078:	601a      	str	r2, [r3, #0]
            OutPutDataFeedBack->dataLength = 0x01;
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	2201      	movs	r2, #1
 800107e:	729a      	strb	r2, [r3, #10]
            if(e_parseStatus_error != parseStatus)
 8001080:	7ffb      	ldrb	r3, [r7, #31]
 8001082:	2b02      	cmp	r3, #2
 8001084:	d010      	beq.n	80010a8 <handleDataFrame+0xf8>
            {
                /* check data = 0 or =1*/
                if((0x00 == Output.data[0]) || (0x01 == Output.data[0]) || (0x02 == Output.data[0]))
 8001086:	7d3b      	ldrb	r3, [r7, #20]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <handleDataFrame+0xe8>
 800108c:	7d3b      	ldrb	r3, [r7, #20]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d002      	beq.n	8001098 <handleDataFrame+0xe8>
 8001092:	7d3b      	ldrb	r3, [r7, #20]
 8001094:	2b02      	cmp	r3, #2
 8001096:	d103      	bne.n	80010a0 <handleDataFrame+0xf0>
                {
                    /* control fan mode*/


                    OutPutDataFeedBack->data[0] = 0x00;
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	2200      	movs	r2, #0
 800109c:	711a      	strb	r2, [r3, #4]
            }
            else
            {
                OutPutDataFeedBack->data[0] = 0xFF;
            }
            break;
 800109e:	e023      	b.n	80010e8 <handleDataFrame+0x138>
                    OutPutDataFeedBack->data[0] = 0x01;
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	2201      	movs	r2, #1
 80010a4:	711a      	strb	r2, [r3, #4]
            break;
 80010a6:	e01f      	b.n	80010e8 <handleDataFrame+0x138>
                OutPutDataFeedBack->data[0] = 0xFF;
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	22ff      	movs	r2, #255	; 0xff
 80010ac:	711a      	strb	r2, [r3, #4]
            break;
 80010ae:	e01b      	b.n	80010e8 <handleDataFrame+0x138>
        case ID_RECEIVED_SELECT_READ_ALL_STATUS_MODE:
            /* setup frame feed back*/
            OutPutDataFeedBack->Id_Byte = ID_FEEDBACK_SELECT_READ_ALL_STATUS_MODE;
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	2284      	movs	r2, #132	; 0x84
 80010b4:	601a      	str	r2, [r3, #0]
          if(e_parseStatus_error != parseStatus)
 80010b6:	7ffb      	ldrb	r3, [r7, #31]
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d009      	beq.n	80010d0 <handleDataFrame+0x120>
            {
                if(0x00 == Output.dataLength)
 80010bc:	7ebb      	ldrb	r3, [r7, #26]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d111      	bne.n	80010e6 <handleDataFrame+0x136>
                {
                    OutPutDataFeedBack->data[0] = 0x00;
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	2200      	movs	r2, #0
 80010c6:	711a      	strb	r2, [r3, #4]
                    OutPutDataFeedBack->dataLength = 0x05;
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	2205      	movs	r2, #5
 80010cc:	729a      	strb	r2, [r3, #10]
            else
            {
                OutPutDataFeedBack->dataLength = 0x01;
                OutPutDataFeedBack->data[0] = 0xFF;
            }
            break;
 80010ce:	e00a      	b.n	80010e6 <handleDataFrame+0x136>
                OutPutDataFeedBack->dataLength = 0x01;
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	2201      	movs	r2, #1
 80010d4:	729a      	strb	r2, [r3, #10]
                OutPutDataFeedBack->data[0] = 0xFF;
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	22ff      	movs	r2, #255	; 0xff
 80010da:	711a      	strb	r2, [r3, #4]
            break;
 80010dc:	e003      	b.n	80010e6 <handleDataFrame+0x136>
        default:
            status = e_parseStatus_error;
 80010de:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <handleDataFrame+0x144>)
 80010e0:	2202      	movs	r2, #2
 80010e2:	701a      	strb	r2, [r3, #0]
            break;
 80010e4:	e000      	b.n	80010e8 <handleDataFrame+0x138>
            break;
 80010e6:	bf00      	nop
    }
    return status;
 80010e8:	4b02      	ldr	r3, [pc, #8]	; (80010f4 <handleDataFrame+0x144>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000014 	.word	0x20000014

080010f8 <CreateSendFeedBackFrame>:

void CreateSendFeedBackFrame(parse_data_line_struct_t *OutPutDataFeedBack, uint8_t* frameData, uint8_t* frameSize)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b087      	sub	sp, #28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
    uint8_t Index =0;
 8001104:	2300      	movs	r3, #0
 8001106:	75fb      	strb	r3, [r7, #23]
    frameData[0] = 0x02;
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	2202      	movs	r2, #2
 800110c:	701a      	strb	r2, [r3, #0]
    frameData[1] = OutPutDataFeedBack->Id_Byte;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	3301      	adds	r3, #1
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	701a      	strb	r2, [r3, #0]
    frameData[2] = OutPutDataFeedBack->dataLength;
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	3302      	adds	r3, #2
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	7a92      	ldrb	r2, [r2, #10]
 8001122:	701a      	strb	r2, [r3, #0]
    for(Index = 0; Index < OutPutDataFeedBack->dataLength; Index++)
 8001124:	2300      	movs	r3, #0
 8001126:	75fb      	strb	r3, [r7, #23]
 8001128:	e00c      	b.n	8001144 <CreateSendFeedBackFrame+0x4c>
    {
        frameData[3+Index] = OutPutDataFeedBack->data[Index];
 800112a:	7dfa      	ldrb	r2, [r7, #23]
 800112c:	7dfb      	ldrb	r3, [r7, #23]
 800112e:	3303      	adds	r3, #3
 8001130:	4619      	mov	r1, r3
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	440b      	add	r3, r1
 8001136:	68f9      	ldr	r1, [r7, #12]
 8001138:	440a      	add	r2, r1
 800113a:	7912      	ldrb	r2, [r2, #4]
 800113c:	701a      	strb	r2, [r3, #0]
    for(Index = 0; Index < OutPutDataFeedBack->dataLength; Index++)
 800113e:	7dfb      	ldrb	r3, [r7, #23]
 8001140:	3301      	adds	r3, #1
 8001142:	75fb      	strb	r3, [r7, #23]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	7a9b      	ldrb	r3, [r3, #10]
 8001148:	7dfa      	ldrb	r2, [r7, #23]
 800114a:	429a      	cmp	r2, r3
 800114c:	d3ed      	bcc.n	800112a <CreateSendFeedBackFrame+0x32>
    }
    frameData[3+OutPutDataFeedBack->dataLength] = 0x03;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	7a9b      	ldrb	r3, [r3, #10]
 8001152:	3303      	adds	r3, #3
 8001154:	461a      	mov	r2, r3
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	4413      	add	r3, r2
 800115a:	2203      	movs	r2, #3
 800115c:	701a      	strb	r2, [r3, #0]
    *frameSize = 4 + OutPutDataFeedBack->dataLength;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	7a9b      	ldrb	r3, [r3, #10]
 8001162:	3304      	adds	r3, #4
 8001164:	b2da      	uxtb	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	701a      	strb	r2, [r3, #0]
}
 800116a:	bf00      	nop
 800116c:	371c      	adds	r7, #28
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr

08001180 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001184:	e7fe      	b.n	8001184 <HardFault_Handler+0x4>

08001186 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800118a:	e7fe      	b.n	800118a <MemManage_Handler+0x4>

0800118c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001190:	e7fe      	b.n	8001190 <BusFault_Handler+0x4>

08001192 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001196:	e7fe      	b.n	8001196 <UsageFault_Handler+0x4>

08001198 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <PendSV_Handler>:
  * @brief  This function handles PendSV_Handler exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <USART1_IRQHandler>:
  * @brief  This function handles USARTy global interrupt request.
  * @param  None
  * @retval None
  */
void USART1_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
  //   HAL_GPIO_Write_Pin(GPIOC, GPIO_Pin_13,Bit_SET);
  // }
//   if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
//   {
      uint8_t ch;
      ch =  USART_ReceiveData(USART1);
 80011ce:	4806      	ldr	r0, [pc, #24]	; (80011e8 <USART1_IRQHandler+0x20>)
 80011d0:	f7ff fd51 	bl	8000c76 <USART_ReceiveData>
 80011d4:	4603      	mov	r3, r0
 80011d6:	71fb      	strb	r3, [r7, #7]
      USART1_callBackFuction(ch);
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f8e0 	bl	80003a0 <USART1_callBackFuction>
//   }


}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40013800 	.word	0x40013800

080011ec <USART2_IRQHandler>:
  * @brief  This function handles USARTz global interrupt request.
  * @param  None
  * @retval None
  */
void USART2_IRQHandler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr

080011f8 <main>:
 */

#include <stdint.h>
#include <app.h>
int main(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  app_init();
 80011fc:	f7ff f872 	bl	80002e4 <app_init>
  StartProgram();
 8001200:	f7ff f88c 	bl	800031c <StartProgram>
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800120e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001210:	f7ff fd5c 	bl	8000ccc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001214:	480c      	ldr	r0, [pc, #48]	; (8001248 <LoopForever+0x6>)
  ldr r1, =_edata
 8001216:	490d      	ldr	r1, [pc, #52]	; (800124c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001218:	4a0d      	ldr	r2, [pc, #52]	; (8001250 <LoopForever+0xe>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800121c:	e002      	b.n	8001224 <LoopCopyDataInit>

0800121e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001222:	3304      	adds	r3, #4

08001224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001228:	d3f9      	bcc.n	800121e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122a:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <LoopForever+0x12>)
  ldr r4, =_ebss
 800122c:	4c0a      	ldr	r4, [pc, #40]	; (8001258 <LoopForever+0x16>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001230:	e001      	b.n	8001236 <LoopFillZerobss>

08001232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001234:	3204      	adds	r2, #4

08001236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001238:	d3fb      	bcc.n	8001232 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800123a:	f000 f811 	bl	8001260 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800123e:	f7ff ffdb 	bl	80011f8 <main>

08001242 <LoopForever>:

LoopForever:
    b LoopForever
 8001242:	e7fe      	b.n	8001242 <LoopForever>
  ldr   r0, =_estack
 8001244:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800124c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001250:	080012c8 	.word	0x080012c8
  ldr r2, =_sbss
 8001254:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001258:	2000086c 	.word	0x2000086c

0800125c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC1_2_IRQHandler>
	...

08001260 <__libc_init_array>:
 8001260:	b570      	push	{r4, r5, r6, lr}
 8001262:	2600      	movs	r6, #0
 8001264:	4d0c      	ldr	r5, [pc, #48]	; (8001298 <__libc_init_array+0x38>)
 8001266:	4c0d      	ldr	r4, [pc, #52]	; (800129c <__libc_init_array+0x3c>)
 8001268:	1b64      	subs	r4, r4, r5
 800126a:	10a4      	asrs	r4, r4, #2
 800126c:	42a6      	cmp	r6, r4
 800126e:	d109      	bne.n	8001284 <__libc_init_array+0x24>
 8001270:	f000 f81a 	bl	80012a8 <_init>
 8001274:	2600      	movs	r6, #0
 8001276:	4d0a      	ldr	r5, [pc, #40]	; (80012a0 <__libc_init_array+0x40>)
 8001278:	4c0a      	ldr	r4, [pc, #40]	; (80012a4 <__libc_init_array+0x44>)
 800127a:	1b64      	subs	r4, r4, r5
 800127c:	10a4      	asrs	r4, r4, #2
 800127e:	42a6      	cmp	r6, r4
 8001280:	d105      	bne.n	800128e <__libc_init_array+0x2e>
 8001282:	bd70      	pop	{r4, r5, r6, pc}
 8001284:	f855 3b04 	ldr.w	r3, [r5], #4
 8001288:	4798      	blx	r3
 800128a:	3601      	adds	r6, #1
 800128c:	e7ee      	b.n	800126c <__libc_init_array+0xc>
 800128e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001292:	4798      	blx	r3
 8001294:	3601      	adds	r6, #1
 8001296:	e7f2      	b.n	800127e <__libc_init_array+0x1e>
 8001298:	080012c0 	.word	0x080012c0
 800129c:	080012c0 	.word	0x080012c0
 80012a0:	080012c0 	.word	0x080012c0
 80012a4:	080012c4 	.word	0x080012c4

080012a8 <_init>:
 80012a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012aa:	bf00      	nop
 80012ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ae:	bc08      	pop	{r3}
 80012b0:	469e      	mov	lr, r3
 80012b2:	4770      	bx	lr

080012b4 <_fini>:
 80012b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012b6:	bf00      	nop
 80012b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ba:	bc08      	pop	{r3}
 80012bc:	469e      	mov	lr, r3
 80012be:	4770      	bx	lr
